{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal-drag-drop/src/helpers/DragScrollDelta.js"],"names":[],"mappings":";AAAA,aAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KAWP,eAAe;YAAf,eAAe;;;;;;AAIT,WAJN,eAAe,GAIN;yBAJT,eAAe;;AAKnB,8BALI,eAAe,6CAKX;;;;;;AAMR,OAAI,CAAC,QAAQ,GAAG,8BAAkB,CAAC;;;;;;;AAOnC,OAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;GAC3B;;;;;;eAnBI,eAAe;;UAwBL,2BAAG;AACjB,+BAzBI,eAAe,iDAyBK;AACxB,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrB;;;;;;;;;;;UASY,uBAAC,KAAK,EAAE,KAAK,EAAE;AAC3B,QAAI,WAAW,GAAG;AACjB,eAAU,EAAE,qBAAS,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC;AACvD,cAAS,EAAE,qBAAS,YAAY,CAAC,KAAK,CAAC,aAAa,CAAC;KACrD,CAAC;AACF,QAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC5C,QAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;;AAE3C,QAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AACxB,WAAM,EAAE,WAAW,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU;AACpD,WAAM,EAAE,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS;KAClD,CAAC,CAAC;IACH;;;;;;;;;;UAQI,eAAC,QAAQ,EAAE,gBAAgB,EAAE;AACjC,QAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC,QAAQ,KAAK,OAAO,EAAE;;;AAGpD,YAAO;KACP;;AAED,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,SAAI,gBAAI,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE;AAChD,UAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;AAC1B,iBAAU,EAAE,qBAAS,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACvD,gBAAS,EAAE,qBAAS,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;OACrD,CAAC,CAAC;;AAEH,UAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7C,UAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAI,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/F;KACD;IACD;;;;;;;UAKG,gBAAG;AACN,QAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;AACnC,QAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC3B;;;SAnFI,eAAe;;;kBAsFN,eAAe","file":"bower_components/metal-drag-drop/src/helpers/DragScrollDelta.js","sourcesContent":["'use strict';\n\nimport dom from 'bower:metal/src/dom/dom';\nimport EventEmitter from 'bower:metal/src/events/EventEmitter';\nimport EventHandler from 'bower:metal/src/events/EventHandler';\nimport Position from 'bower:metal-position/src/Position';\n\n/**\n * Helper called by the `Drag` instance that emits an event whenever\n * the scroll position of the given containers change.\n */\nclass DragScrollDelta extends EventEmitter {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\t/**\n\t\t * `EventHandler` for the scroll events.\n\t\t * @type {EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.handler_ = new EventHandler();\n\n\t\t/**\n\t\t * The scroll positions for the scroll elements that are being listened to.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.scrollPositions_ = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stop();\n\t\tthis.handler_ = null;\n\t}\n\n\t/**\n\t * Handles a \"scroll\" event, emitting a \"scrollDelta\" event with the\n\t * difference between the previous and new values.\n\t * @param {number} index\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleScroll_(index, event) {\n\t\tvar newPosition = {\n\t\t\tscrollLeft: Position.getScrollLeft(event.currentTarget),\n\t\t\tscrollTop: Position.getScrollTop(event.currentTarget)\n\t\t};\n\t\tvar position = this.scrollPositions_[index];\n\t\tthis.scrollPositions_[index] = newPosition;\n\n\t\tthis.emit('scrollDelta', {\n\t\t\tdeltaX: newPosition.scrollLeft - position.scrollLeft,\n\t\t\tdeltaY: newPosition.scrollTop - position.scrollTop\n\t\t});\n\t}\n\n\t/**\n\t * Starts listening to scroll changes on the given elements that contain\n\t * the current drag node.\n\t * @param {!Element} dragNode\n\t * @param {!Array<!Element>} scrollContainers\n\t */\n\tstart(dragNode, scrollContainers) {\n\t\tif (getComputedStyle(dragNode).position === 'fixed') {\n\t\t\t// If the drag node's position is \"fixed\", then its coordinates don't need to\n\t\t\t// be updated when parents are scrolled.\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0; i < scrollContainers.length; i++) {\n\t\t\tif (dom.contains(scrollContainers[i], dragNode)) {\n\t\t\t\tthis.scrollPositions_.push({\n\t\t\t\t\tscrollLeft: Position.getScrollLeft(scrollContainers[i]),\n\t\t\t\t\tscrollTop: Position.getScrollTop(scrollContainers[i])\n\t\t\t\t});\n\n\t\t\t\tvar index = this.scrollPositions_.length - 1;\n\t\t\t\tthis.handler_.add(dom.on(scrollContainers[i], 'scroll', this.handleScroll_.bind(this, index)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops listening to scroll changes.\n\t */\n\tstop() {\n\t\tthis.handler_.removeAllListeners();\n\t\tthis.scrollPositions_ = [];\n\t}\n}\n\nexport default DragScrollDelta;\n"],"sourceRoot":"/source/"}