{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal/src/component/ComponentCollector.js"],"names":[],"mappings":";AAAA,aAAY,CAAC;;;;;;;;;;;;;;;;KAKP,kBAAkB;YAAlB,kBAAkB;;WAAlB,kBAAkB;yBAAlB,kBAAkB;;8BAAlB,kBAAkB;;;;;;;;eAAlB,kBAAkB;;;;;;;UAKX,sBAAC,SAAS,EAAE;AACvB,sBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;IACxD;;;;;;;;;;;;UAUc,yBAAC,aAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC5C,QAAI,SAAS,GAAG,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AAClD,QAAI,CAAC,SAAS,EAAE;AACf,SAAI,aAAa,GAAG,8BAAkB,cAAc,CAAC,aAAa,CAAC,CAAC;AACpE,SAAI,IAAI,GAAG,QAAQ,IAAI,EAAE,CAAC;AAC1B,SAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACb,SAAI,CAAC,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC;AACxB,cAAS,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;KACpC;AACD,WAAO,SAAS,CAAC;IACjB;;;;;;;;UAMc,yBAAC,SAAS,EAAE;AAC1B,WAAO,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACnD;;;;;;;;;;UAQc,yBAAC,EAAE,EAAE,QAAQ,EAAE;AAC7B,QAAI,SAAS,GAAG,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AAClD,QAAI,SAAS,IAAI,QAAQ,EAAE;AAC1B,cAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC7B;AACD,WAAO,SAAS,CAAC;IACjB;;;SAjDI,kBAAkB;;;AAwDxB,mBAAkB,CAAC,UAAU,GAAG,EAAE,CAAC;;kBAEpB,kBAAkB","file":"bower_components/metal/src/component/ComponentCollector.js","sourcesContent":["'use strict';\n\nimport ComponentRegistry from '../component/ComponentRegistry';\nimport Disposable from '../disposable/Disposable';\n\nclass ComponentCollector extends Disposable {\n\t/**\n\t * Adds a component to this collector.\n\t * @param {!Component} component\n\t */\n\taddComponent(component) {\n\t\tComponentCollector.components[component.id] = component;\n\t}\n\n\t/**\n\t * Creates the appropriate component from the given config data if it doesn't\n\t * exist yet.\n\t * @param {string} componentName The name of the component to be created.\n\t * @param {string} id The id of the component to be created.\n\t * @param {Object=} opt_data\n\t * @return {!Component} The component instance.\n\t */\n\tcreateComponent(componentName, id, opt_data) {\n\t\tvar component = ComponentCollector.components[id];\n\t\tif (!component) {\n\t\t\tvar ConstructorFn = ComponentRegistry.getConstructor(componentName);\n\t\t\tvar data = opt_data || {};\n\t\t\tdata.id = id;\n\t\t\tdata.element = '#' + id;\n\t\t\tcomponent = new ConstructorFn(data);\n\t\t}\n\t\treturn component;\n\t}\n\n\t/**\n\t * Removes the given component from this collector.\n\t * @param {!Component} component\n\t */\n\tremoveComponent(component) {\n\t\tdelete ComponentCollector.components[component.id];\n\t}\n\n\t/**\n\t * Updates an existing component instance with new attributes.\n\t * @param {string} id The id of the component to be created or updated.\n\t * @param {Object=} opt_data\n\t * @return {Component} The extracted component instance.\n\t */\n\tupdateComponent(id, opt_data) {\n\t\tvar component = ComponentCollector.components[id];\n\t\tif (component && opt_data) {\n\t\t\tcomponent.setAttrs(opt_data);\n\t\t}\n\t\treturn component;\n\t}\n}\n\n/**\n * Holds all collected components, indexed by their id.\n * @type {!Object<string, !Component>}\n */\nComponentCollector.components = {};\n\nexport default ComponentCollector;\n"],"sourceRoot":"/source/"}