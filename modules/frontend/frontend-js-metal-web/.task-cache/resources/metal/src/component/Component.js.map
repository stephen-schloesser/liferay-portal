{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal/src/component/Component.js"],"names":[],"mappings":"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","file":"bower_components/metal/src/component/Component.js","sourcesContent":["'use strict';\n\nimport array from '../array/array';\nimport core from '../core';\nimport dom from '../dom/dom';\nimport features from '../dom/features';\nimport html from '../html/html';\nimport object from '../object/object';\nimport string from '../string/string';\nimport Attribute from '../attribute/Attribute';\nimport ComponentCollector from '../component/ComponentCollector';\nimport EventEmitterProxy from '../events/EventEmitterProxy';\nimport EventHandler from '../events/EventHandler';\nimport EventsCollector from './EventsCollector';\nimport SurfaceCollector from './SurfaceCollector';\n\n/**\n * Component collects common behaviors to be followed by UI components, such\n * as Lifecycle, bounding box element creation, CSS classes management,\n * events encapsulation and surfaces support. Surfaces are an area of the\n * component that can have information rendered into it. A component\n * manages multiple surfaces. Surfaces are only rendered when its content is\n * modified, representing render performance gains. For each surface, render\n * attributes could be associated, when the render context of a surface gets\n * modified the component Lifecycle re-paints the modified surface\n * automatically.\n *\n * Example:\n *\n * <code>\n * class CustomComponent extends Component {\n *   constructor(config) {\n *     super(config);\n *   }\n *\n *   getElementContent() {\n *     return this.getSurfaceElement('header');\n *   }\n *\n *   getSurfaceContent(surfaceId, surfaceElementId) {\n *   }\n *\n *   attached() {\n *   }\n *\n *   detached() {\n *   }\n * }\n *\n * CustomComponent.ATTRS = {\n *   title: { value: 'Title' },\n *   fontSize: { value: '10px' }\n * };\n *\n * CustomComponent.SURFACES = {\n *   header: { renderAttrs: ['title', 'fontSize'] },\n *   bottom: { renderAttrs: ['fontSize'] }\n * };\n * </code>\n *\n * @param {!Object} opt_config An object with the initial values for this component's\n *   attributes.\n * @constructor\n * @extends {Attribute}\n */\nclass Component extends Attribute {\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * Holds data about all surfaces that were collected through the\n\t\t * `replaceSurfacePlaceholders_` method.\n\t\t * @type {!Array}\n\t\t * @protected\n\t\t */\n\t\tthis.collectedSurfaces_ = [];\n\n\t\t/**\n\t\t * Gets all nested components.\n\t\t * @type {!Array<!Component>}\n\t\t */\n\t\tthis.components = {};\n\n\t\t/**\n\t\t * Whether the element is being decorated.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.decorating_ = false;\n\n\t\t/**\n\t\t * Holds events that were listened through the `delegate` Component function.\n\t\t * @type {EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.delegateEventHandler_ = null;\n\n\t\t/**\n\t\t * Instance of `EventEmitterProxy` which proxies events from the component's\n\t\t * element to the component itself.\n\t\t * @type {EventEmitterProxy}\n\t\t * @protected\n\t\t */\n\t\tthis.elementEventProxy_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance for events attached from the `events` attribute.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsAttrHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * Collects inline events from html contents.\n\t\t * @type {!EventsCollector}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsCollector_ = new EventsCollector(this);\n\n\t\t/**\n\t\t * Holds the number of generated ids for each surface's contents.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.generatedIdCount_ = {};\n\n\t\t/**\n\t\t * Whether the element is in document.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.inDocument = false;\n\n\t\t/**\n\t\t * The initial config option passed to this constructor.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.initialConfig_ = opt_config || {};\n\n\t\t/**\n\t\t * The ids of the surfaces registered by this component.\n\t\t * @type {!Object<string, boolean>}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaceIds_ = {};\n\n\t\t/**\n\t\t * Whether the element was rendered.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.wasRendered = false;\n\n\t\t/**\n\t\t * The component's element will be appended to the element this variable is\n\t\t * set to, unless the user specifies another parent when calling `render` or\n\t\t * `attach`.\n\t\t * @type {!Element}\n\t\t */\n\t\tthis.DEFAULT_ELEMENT_PARENT = document.body;\n\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'ELEMENT_CLASSES', this.mergeElementClasses_);\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'ELEMENT_TAG_NAME', array.firstDefinedValue);\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'SURFACE_TAG_NAME', array.firstDefinedValue);\n\t\tthis.addSurfacesFromStaticHint_();\n\n\t\tthis.delegateEventHandler_ = new EventHandler();\n\n\t\tthis.created_();\n\t}\n\n\t/**\n\t * Adds the listeners specified in the given object.\n\t * @param {Object} events\n\t * @protected\n\t */\n\taddListenersFromObj_(events) {\n\t\tvar eventNames = Object.keys(events || {});\n\t\tfor (var i = 0; i < eventNames.length; i++) {\n\t\t\tvar info = this.extractListenerInfo_(events[eventNames[i]]);\n\t\t\tif (info.fn) {\n\t\t\t\tvar handler;\n\t\t\t\tif (info.selector) {\n\t\t\t\t\thandler = this.delegate(eventNames[i], info.selector, info.fn);\n\t\t\t\t} else {\n\t\t\t\t\thandler = this.on(eventNames[i], info.fn);\n\t\t\t\t}\n\t\t\t\tthis.eventsAttrHandler_.add(handler);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a simple attribute with the given name, if it doesn't exist yet.\n\t * @param {string} attrName\n\t * @param {Object=} opt_initialValue Optional initial value for the new attr.\n\t * @protected\n\t */\n\taddMissingAttr_(attrName, initialValue) {\n\t\tif (!this.getAttrConfig(attrName)) {\n\t\t\tthis.addAttr(attrName, {}, initialValue);\n\t\t}\n\t}\n\n\t/**\n\t * Overrides `addSingleListener_` from `EventEmitter`, so we can create\n\t * the `EventEmitterProxy` instance only when it's needed for the first\n\t * time.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {Function=} opt_origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t * @override\n\t */\n\taddSingleListener_(event, listener, opt_origin) {\n\t\tif (!this.elementEventProxy_ &&\n\t\t\tdom.supportsEvent(this.constructor.ELEMENT_TAG_NAME_MERGED, event)) {\n\t\t\tthis.elementEventProxy_ = new EventEmitterProxy(this.element, this);\n\t\t}\n\t\tsuper.addSingleListener_(event, listener, opt_origin);\n\t}\n\n\t/**\n\t * Adds the surface for this component's main element, if it doesn't exist yet.\n\t * @protected\n\t */\n\taddElementSurface_() {\n\t\tif (!this.surfaceIds_[this.id]) {\n\t\t\tthis.addSurface(this.id, this.buildElementSurfaceData_());\n\t\t}\n\t}\n\n\t/**\n\t * Registers a surface to the component. Surface elements are not\n\t * automatically appended to the component element.\n\t * @param {string} surfaceId The surface id to be registered.\n\t * @param {Object=} opt_surfaceConfig Optional surface configuration.\n\t * @chainable\n\t */\n\taddSurface(surfaceId, opt_surfaceConfig) {\n\t\tvar config = opt_surfaceConfig || {};\n\t\tvar surfaceElementId = this.getSurfaceElementId_(surfaceId, config);\n\t\tif (this.surfaceIds_[surfaceElementId]) {\n\t\t\tComponent.surfacesCollector.updateSurface(surfaceElementId, config);\n\t\t} else {\n\t\t\tthis.surfaceIds_[surfaceElementId] = true;\n\t\t\tconfig.cacheState = config.cacheState || Component.Cache.NOT_INITIALIZED;\n\t\t\tComponent.surfacesCollector.addSurface(surfaceElementId, config);\n\t\t\tif (config.componentName && surfaceId !== this.id) {\n\t\t\t\tthis.createSubComponent_(config.componentName, surfaceElementId);\n\t\t\t}\n\t\t\tthis.cacheSurfaceRenderAttrs_(surfaceElementId);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Registers surfaces to the component. Surface elements are not\n\t * automatically appended to the component element.\n\t * @param {!Object.<string, Object=>} configs An object that maps the names\n\t *     of all the surfaces to be added to their configuration objects.\n\t * @chainable\n\t */\n\taddSurfaces(configs) {\n\t\tfor (var surfaceId in configs) {\n\t\t\tthis.addSurface(surfaceId, configs[surfaceId]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds surfaces from super classes static hint.\n\t * @protected\n\t */\n\taddSurfacesFromStaticHint_() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'SURFACES', this.mergeObjects_);\n\t\tthis.surfacesRenderAttrs_ = {};\n\n\t\tvar configs = this.constructor.SURFACES_MERGED;\n\t\tfor (var surfaceId in configs) {\n\t\t\tthis.addSurface(surfaceId, object.mixin({}, configs[surfaceId]));\n\t\t}\n\t}\n\n\t/**\n\t * Invokes the attached Lifecycle. When attached, the component element is\n\t * appended to the DOM and any other action to be performed must be\n\t * implemented in this method, such as, binding DOM events. A component can\n\t * be re-attached multiple times.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.render(null, existingElement)`.\n\t * @protected\n\t * @chainable\n\t */\n\tattach(opt_parentElement, opt_siblingElement) {\n\t\tif (!this.inDocument) {\n\t\t\tthis.renderElement_(opt_parentElement, opt_siblingElement);\n\t\t\tthis.inDocument = true;\n\t\t\tif (!this.wasRendered) {\n\t\t\t\tthis.updatePlaceholderSurfaces_();\n\t\t\t}\n\t\t\tthis.attached();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When attached, the component element is appended to the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, binding DOM events. A component can be re-attached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the detach phase.\n\t */\n\tattached() {}\n\n\t/**\n\t * Builds the data for this component's main element's surface.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildElementSurfaceData_() {\n\t\treturn {\n\t\t\tcomponentName: this.constructor.NAME\n\t\t};\n\t}\n\n\t/**\n\t * Builds a surface placeholder, attaching it to the given data.\n\t * @param {string} surfaceElementId\n\t * @param {Object=} opt_data\n\t * @return {string}\n\t */\n\tbuildPlaceholder(surfaceElementId, opt_data) {\n\t\tif (surfaceElementId && opt_data) {\n\t\t\topt_data.surfaceElementId = surfaceElementId;\n\t\t\tthis.addSurface(surfaceElementId, opt_data);\n\t\t}\n\t\treturn '%%%%~s' + (surfaceElementId ? '-' + surfaceElementId : '') + '~%%%%';\n\t}\n\n\t/**\n\t * Caches the given content for the surface with the requested id.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t */\n\tcacheSurfaceContent(surfaceElementId, content) {\n\t\tvar cacheState = this.computeSurfaceCacheState_(content);\n\t\tvar surface = this.getSurface(surfaceElementId);\n\t\tsurface.cacheState = cacheState;\n\t}\n\n\t/**\n\t * Caches surface render attributes into a O(k) flat map representation.\n\t * Relevant for performance to calculate the surfaces group that were\n\t * modified by attributes mutation.\n\t * @param {string} surfaceElementId The surface id to be cached into the flat map.\n\t * @protected\n\t */\n\tcacheSurfaceRenderAttrs_(surfaceElementId) {\n\t\tvar attrs = this.getSurface(surfaceElementId).renderAttrs || [];\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\tif (!this.surfacesRenderAttrs_[attrs[i]]) {\n\t\t\t\tthis.surfacesRenderAttrs_[attrs[i]] = {};\n\t\t\t\tthis.addMissingAttr_(attrs[i], this.initialConfig_[attrs[i]]);\n\t\t\t}\n\t\t\tthis.surfacesRenderAttrs_[attrs[i]][surfaceElementId] = true;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given content has an element tag with the given id.\n\t * @param {!Element|string} content\n\t * @param {string} id\n\t * @return {boolean}\n\t * @protected\n\t */\n\tcheckHasElementTag_(content, id) {\n\t\treturn core.isString(content) ? content.indexOf(' id=\"' + id + '\"') !== -1 : content.id === id;\n\t}\n\n\t/**\n\t * Clears the cache of the specified surface.\n\t * @param {string} surfaceIds\n\t */\n\tclearSurfaceCache(surfaceId) {\n\t\tthis.getSurface(surfaceId).cacheState = Component.Cache.NOT_INITIALIZED;\n\t}\n\n\t/**\n\t * Compares cache states.\n\t * @param {number} currentCacheState\n\t * @param {number} previousCacheState\n\t * @return {boolean} True if there's a cache hit, or false for cache miss.\n\t */\n\tcompareCacheStates_(currentCacheState, previousCacheState) {\n\t\treturn currentCacheState !== Component.Cache.NOT_INITIALIZED &&\n\t\t\tcurrentCacheState !== Component.Cache.NOT_CACHEABLE &&\n\t\t\tcurrentCacheState === previousCacheState;\n\t}\n\n\t/**\n\t * Computes the cache state for the surface content. If value is string, the\n\t * cache state is represented by its hashcode.\n\t * @param {Object} value The value to calculate the cache state.\n\t * @return {Object} The computed cache state.\n\t * @protected\n\t */\n\tcomputeSurfaceCacheState_(value) {\n\t\tif (core.isString(value)) {\n\t\t\tif (features.checkAttrOrderChange()) {\n\t\t\t\tvalue = this.convertHtmlToBrowserFormat_(value);\n\t\t\t}\n\t\t\treturn string.hashCode(value);\n\t\t}\n\t\treturn Component.Cache.NOT_CACHEABLE;\n\t}\n\n\t/**\n\t * Converts the given html string to the format the current browser uses\n\t * when html is rendered. This is done by rendering the html in a temporary\n\t * element, and returning its resulting rendered html.\n\t * @param {string} htmlString The html to be converted.\n\t * @return {string}\n\t * @protected\n\t */\n\tconvertHtmlToBrowserFormat_(htmlString) {\n\t\tvar element = document.createElement('div');\n\t\tdom.append(element, htmlString);\n\t\treturn element.innerHTML;\n\t}\n\n\t/**\n\t * Creates a surface that was found via a string placeholder.\n\t * @param {string=} opt_surfaceElementId\n\t * @param {string=} opt_parentSurfaceElementId The id of the surface element that contains\n\t *   the surface to be created, or undefined if there is none.\n\t * @return {string} The element id of the created surface.\n\t * @protected\n\t */\n\tcreatePlaceholderSurface_(opt_surfaceElementId, opt_parentSurfaceElementId) {\n\t\tvar surfaceElementId = opt_surfaceElementId;\n\t\tif (!core.isDefAndNotNull(surfaceElementId)) {\n\t\t\tsurfaceElementId = this.generateSurfaceElementId_(opt_parentSurfaceElementId);\n\t\t}\n\t\tvar surface = this.getSurface(surfaceElementId);\n\t\tif (!surface) {\n\t\t\tthis.addSurface(surfaceElementId, {\n\t\t\t\tsurfaceElementId: surfaceElementId\n\t\t\t});\n\t\t}\n\t\treturn surfaceElementId;\n\t}\n\n\t/**\n\t * Creates a sub component.\n\t * @param {string} componentName\n\t * @param {string} componentId\n\t * @return {!Component}\n\t * @protected\n\t */\n\tcreateSubComponent_(componentName, componentId) {\n\t\tthis.components[componentId] = Component.componentsCollector.createComponent(\n\t\t\tcomponentName,\n\t\t\tcomponentId,\n\t\t\tthis.getSurface(componentId).componentData\n\t\t);\n\t\treturn this.components[componentId];\n\t}\n\n\t/**\n\t * Creates the surface element with its id namespaced to the component id.\n\t * @param {string} surfaceElementId The id of the element for the surface to be\n\t *   created.\n\t * @return {Element} The surface element.\n\t * @protected\n\t */\n\tcreateSurfaceElement_(surfaceElementId) {\n\t\tvar el = document.createElement(this.constructor.SURFACE_TAG_NAME_MERGED);\n\t\tel.id = surfaceElementId;\n\t\treturn el;\n\t}\n\n\t/**\n\t * Decorates this component as a subcomponent, meaning that no rendering is\n\t * needed since it was already rendered by the parent component. Handles the\n\t * same logics that `renderAsSubComponent`, but also makes sure that the\n\t * surfaces content is updated if the html is incorrect for the given data.\n\t * @param {string} opt_content The content that was already rendered for this\n\t *   component.\n\t */\n\tdecorateAsSubComponent(opt_content) {\n\t\tthis.decorating_ = true;\n\t\tthis.renderAsSubComponent(opt_content);\n\t\tthis.decorating_ = false;\n\t}\n\n\t/**\n\t * Listens to a delegate event on the component's element.\n\t * @param {string} eventName The name of the event to listen to.\n\t * @param {string} selector The selector that matches the child elements that\n\t *   the event should be triggered for.\n\t * @param {!function(!Object)} callback Function to be called when the event is\n\t *   triggered. It will receive the normalized event object.\n\t * @return {!DomEventHandle} Can be used to remove the listener.\n\t */\n\tdelegate(eventName, selector, callback) {\n\t\tvar handle = dom.delegate(this.element, eventName, selector, callback);\n\t\tthis.delegateEventHandler_.add(handle);\n\t\treturn handle;\n\t}\n\n\t/**\n\t * Invokes the detached Lifecycle. When detached, the component element is\n\t * removed from the DOM and any other action to be performed must be\n\t * implemented in this method, such as, unbinding DOM events. A component\n\t * can be detached multiple times.\n\t * @chainable\n\t */\n\tdetach() {\n\t\tif (this.inDocument) {\n\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\tthis.inDocument = false;\n\t\t\tthis.detached();\n\t\t}\n\t\tthis.eventsCollector_.detachAllListeners();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When detached, the component element is removed from the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, unbinding DOM events. A component can be detached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the attach phase.\n\t */\n\tdetached() {}\n\n\t/**\n\t * Internal implementation for the creation phase of the component.\n\t * @protected\n\t */\n\tcreated_() {\n\t\tthis.on('eventsChanged', this.onEventsChanged_);\n\t\tthis.addListenersFromObj_(this.events);\n\n\t\tthis.on('attrsChanged', this.handleAttributesChanges_);\n\t\tComponent.componentsCollector.addComponent(this);\n\n\t\tthis.on('renderSurface', this.defaultRenderSurfaceFn_, true);\n\t}\n\n\t/**\n\t * Lifecycle. Creates the component using existing DOM elements. Often the\n\t * component can be created using existing elements in the DOM to leverage\n\t * progressive enhancement. Any extra operation necessary to prepare the\n\t * component DOM must be implemented in this phase. Decorate phase replaces\n\t * render phase.\n\t *\n\t * Decoration Lifecycle:\n\t *   decorate - Decorate is manually called.\n\t *   retrieve existing html - The cache for all surfaces is filled with any\n\t *     existing html from the document.\n\t *   render surfaces - Surfaces that cause a cache miss are rendered, including\n\t *     the main content (`getElementContent`).\n\t *   attribute synchronization - All synchronization methods are called.\n\t *   attach - Attach Lifecycle is called.\n\t * @chainable\n\t */\n\tdecorate() {\n\t\tthis.decorating_ = true;\n\t\tthis.render();\n\t\tthis.decorating_ = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The default implementation for the `renderSurface` event. Renders\n\t * content into a surface. If the specified content is the same of the\n\t * current surface content, nothing happens. If the surface cache state\n\t * is not initialized or the content is not eligible for cache or content\n\t * is different, the surfaces re-renders.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tdefaultRenderSurfaceFn_(data) {\n\t\tvar surfaceElementId = data.surfaceElementId;\n\t\tvar surface = this.getSurface(surfaceElementId);\n\t\tif (surface.componentName && surfaceElementId !== this.id) {\n\t\t\tthis.renderComponentSurface_(surfaceElementId, data.content);\n\t\t\treturn;\n\t\t}\n\n\t\tvar content = data.content || this.getSurfaceContent_(surfaceElementId);\n\t\tif (core.isDefAndNotNull(content)) {\n\t\t\tvar cacheContent = data.cacheContent || content;\n\t\t\tvar cacheHit = surface.static;\n\t\t\tif (!surface.static) {\n\t\t\t\tvar firstCacheContent = cacheContent;\n\t\t\t\tif (this.decorating_) {\n\t\t\t\t\t// We cache the entire original content first when decorating so we can compare\n\t\t\t\t\t// with the full content we got from the dom. After comparing, we cache the correct\n\t\t\t\t\t// value so updates can work as expected for this surface.\n\t\t\t\t\tthis.cacheSurfaceContent(\n\t\t\t\t\t\tsurfaceElementId,\n\t\t\t\t\t\thtml.compress(this.getSurfaceElement(surfaceElementId).outerHTML)\n\t\t\t\t\t);\n\t\t\t\t\tcontent = this.replaceSurfacePlaceholders_(content, surfaceElementId);\n\t\t\t\t\tfirstCacheContent = content;\n\t\t\t\t}\n\n\t\t\t\tvar previousCacheState = surface.cacheState;\n\t\t\t\tthis.cacheSurfaceContent(surfaceElementId, firstCacheContent);\n\t\t\t\tcacheHit = this.compareCacheStates_(surface.cacheState, previousCacheState);\n\t\t\t\tif (this.decorating_) {\n\t\t\t\t\tthis.cacheSurfaceContent(surfaceElementId, cacheContent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cacheHit) {\n\t\t\t\tif (this.decorating_) {\n\t\t\t\t\tthis.eventsCollector_.attachListeners(cacheContent, surfaceElementId);\n\t\t\t\t} else {\n\t\t\t\t\tthis.renderPlaceholderSurfaceContents_(cacheContent, surfaceElementId);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.eventsCollector_.attachListeners(cacheContent, surfaceElementId);\n\t\t\t\tthis.replaceSurfaceContent_(surfaceElementId, content);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Calls `dispose` on all subcomponents.\n\t * @protected\n\t */\n\tdisposeSubComponents_() {\n\t\tvar ids = Object.keys(this.components);\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\tvar component = this.components[ids[i]];\n\t\t\tif (!component.isDisposed()) {\n\t\t\t\tComponent.componentsCollector.removeComponent(component);\n\t\t\t\tcomponent.dispose();\n\t\t\t}\n\t\t}\n\t\tthis.components = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.detach();\n\n\t\tif (this.elementEventProxy_) {\n\t\t\tthis.elementEventProxy_.dispose();\n\t\t\tthis.elementEventProxy_ = null;\n\t\t}\n\n\t\tthis.delegateEventHandler_.removeAllListeners();\n\t\tthis.delegateEventHandler_ = null;\n\n\t\tthis.disposeSubComponents_();\n\t\tthis.generatedIdCount_ = null;\n\t\tthis.surfacesRenderAttrs_ = null;\n\n\t\tObject.keys(this.surfaceIds_).forEach(surfaceId => this.removeSurface(surfaceId));\n\t\tthis.surfaceIds_ = null;\n\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Emits the `renderSurface` event, which will cause the specified surface to be\n\t * rendered, unless it's prevented.\n\t * @param {string} surfaceElementId\n\t * @param {string=} opt_content\n\t * @param {string=} opt_cacheContent\n\t * @param {Array<string>=} opt_renderAttrs The render attributes that caused the\n\t *   surface to be rerendered, or nothing if that wasn't the cause of the update.\n\t * @protected\n\t */\n\temitRenderSurfaceEvent_(surfaceElementId, opt_content, opt_cacheContent, opt_renderAttrs) {\n\t\tthis.emit('renderSurface', {\n\t\t\tcacheContent: opt_cacheContent,\n\t\t\tcontent: opt_content,\n\t\t\trenderAttrs: opt_renderAttrs || [],\n\t\t\tsurfaceElementId: surfaceElementId,\n\t\t\tsurfaceId: this.getSurfaceId_(surfaceElementId, this.getSurface(surfaceElementId))\n\t\t});\n\t}\n\n\t/**\n\t * Extracts listener info from the given value.\n\t * @param {function()|string|{selector:string,fn:function()|string}} value\n\t * @return {!{selector:string,fn:function()}}\n\t * @protected\n\t */\n\textractListenerInfo_(value) {\n\t\tvar info = {\n\t\t\tfn: value\n\t\t};\n\t\tif (core.isObject(value) && !core.isFunction(value)) {\n\t\t\tinfo.selector = value.selector;\n\t\t\tinfo.fn = value.fn;\n\t\t}\n\t\tif (core.isString(info.fn)) {\n\t\t\tinfo.fn = this.eventsCollector_.getListenerFn(info.fn);\n\t\t}\n\t\treturn info;\n\t}\n\n\t/**\n\t * Fires attributes synchronization changes for attributes.\n\t * @protected\n\t */\n\tsyncAttrs_() {\n\t\tvar attrNames = this.getAttrNames();\n\t\tfor (var i = 0; i < attrNames.length; i++) {\n\t\t\tthis.fireAttrChange_(attrNames[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Fires attributes synchronization changes for attributes.\n\t * @param {Object.<string, Object>} changes Object containing the attribute\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @protected\n\t */\n\tsyncAttrsFromChanges_(changes) {\n\t\tfor (var attr in changes) {\n\t\t\tthis.fireAttrChange_(attr, changes[attr]);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the element that matches the given id on this component. This searches\n\t * on the document first, for performance. If the element is not found, it's\n\t * searched in the component's element directly.\n\t * @param {string} id\n\t * @return {Element}\n\t * @protected\n\t */\n\tfindElementById_(id) {\n\t\treturn document.getElementById(id) || (this.element && this.element.querySelector('#' + id));\n\t}\n\n\t/**\n\t * Finds the element with the given id in the given content, if there is one.\n\t * @param {string} id\n\t * @param {string} content\n\t * @return {Element}\n\t * @protected\n\t */\n\tfindElementInContent_(id, content) {\n\t\tvar element;\n\t\tif (core.isString(content)) {\n\t\t\tcontent = dom.buildFragment(content).childNodes[0];\n\t\t}\n\t\tif (content && content.id === id) {\n\t\t\telement = content;\n\t\t}\n\t\treturn element;\n\t}\n\n\t/**\n\t * Fires attribute synchronization change for the attribute.\n\t * @param {Object.<string, Object>} change Object containing newVal and\n\t *     prevVal keys.\n\t * @protected\n\t */\n\tfireAttrChange_(attr, opt_change) {\n\t\tvar fn = this['sync' + attr.charAt(0).toUpperCase() + attr.slice(1)];\n\t\tif (core.isFunction(fn)) {\n\t\t\tif (!opt_change) {\n\t\t\t\topt_change = {\n\t\t\t\t\tnewVal: this[attr],\n\t\t\t\t\tprevVal: undefined\n\t\t\t\t};\n\t\t\t}\n\t\t\tfn.call(this, opt_change.newVal, opt_change.prevVal);\n\t\t}\n\t}\n\n\t/**\n\t * Generates an id for a surface that was found inside the contents of the main\n\t * element or of a parent surface.\n\t * @param {string=} opt_parentSurfaceElementId The id of the parent surface, or undefined\n\t *   if there is none.\n\t * @return {string} The generated id.\n\t */\n\tgenerateSurfaceElementId_(opt_parentSurfaceElementId) {\n\t\tvar parentElementId = opt_parentSurfaceElementId || this.id;\n\t\tthis.generatedIdCount_[parentElementId] = (this.generatedIdCount_[parentElementId] || 0) + 1;\n\t\treturn parentElementId + '-s' + this.generatedIdCount_[parentElementId];\n\t}\n\n\t/**\n\t * Gets the html that should be used to build this component's main element with\n\t * some content.\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetComponentHtml(content) {\n\t\treturn this.wrapContentIfNecessary(content, this.id, this.constructor.ELEMENT_TAG_NAME_MERGED);\n\t}\n\n\t/**\n\t * Gets the content that should be rendered in the component's main element.\n\t * Should be implemented by subclasses.\n\t * @return {Object|string} The content to be rendered. If the content is a\n\t *   string, surfaces can be represented by placeholders in the format specified\n\t *   by Component.SURFACE_REGEX. Also, if the string content's main wrapper has\n\t *   the component's id, then it will be used to render the main element tag.\n\t */\n\tgetElementContent() {}\n\n\t/**\n\t * Calls `getElementContent` and creating its surface if it hasn't been created yet.\n\t * @return {Object|string} The content to be rendered. If the content is a\n\t *   string, surfaces can be represented by placeholders in the format specified\n\t *   by Component.SURFACE_REGEX. Also, if the string content's main wrapper has\n\t *   the component's id, then it will be used to render the main element tag.\n\t * @protected\n\t */\n\tgetElementContent_() {\n\t\tthis.addElementSurface_();\n\t\treturn this.getElementContent();\n\t}\n\n\t/**\n\t * Calls `getElementContent` and replaces all placeholders in the returned content.\n\t * This is called when rendering sub components, so it also attaches listeners to\n\t * the original content.\n\t * @return {string} The content with all placeholders already replaced.\n\t */\n\tgetElementExtendedContent() {\n\t\tvar content = this.getElementContent_();\n\t\tthis.eventsCollector_.attachListeners(content, this.id);\n\t\treturn this.replaceSurfacePlaceholders_(content);\n\t}\n\n\t/**\n\t * Gets surfaces that got modified by the specified attributes changes.\n\t * @param {Object.<string, Object>} changes Object containing the attribute\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @return {Object.<string, boolean>} Object containing modified surface ids\n\t *     as key and true as value.\n\t */\n\tgetModifiedSurfacesFromChanges_(changes) {\n\t\tvar surfaces = {};\n\t\tfor (var attr in changes) {\n\t\t\tvar surfaceNames = Object.keys(this.surfacesRenderAttrs_[attr] || {});\n\t\t\tfor (var i = 0; i < surfaceNames.length; i++) {\n\t\t\t\tif (!surfaces[surfaceNames[i]]) {\n\t\t\t\t\tsurfaces[surfaceNames[i]] = [];\n\t\t\t\t}\n\t\t\t\tsurfaces[surfaceNames[i]].push(attr);\n\t\t\t}\n\t\t}\n\t\treturn surfaces;\n\t}\n\n\t/**\n\t * Same as `getSurfaceHtml`, but only called for non component surfaces.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetNonComponentSurfaceHtml(surfaceElementId, content) {\n\t\treturn this.wrapContentIfNecessary(content, surfaceElementId, this.constructor.SURFACE_TAG_NAME_MERGED);\n\t}\n\n\t/**\n\t * Gets surface configuration object. If surface is not registered returns\n\t * null.\n\t * @param {string} surfaceId The surface id or its element id.\n\t * @return {Object} The surface configuration object.\n\t */\n\tgetSurface(surfaceId) {\n\t\tvar surface = Component.surfacesCollector.getSurface(this.getSurfaceElementId_(surfaceId));\n\t\treturn surface ? surface : Component.surfacesCollector.getSurface(surfaceId);\n\t}\n\n\t/**\n\t * Gets the content for the requested surface. Should be implemented by subclasses.\n\t * @param {string} surfaceId The surface id.\n\t * @param {string} surfaceElementId The surface element id\n\t * @return {Object|string} The content to be rendered. If the content is a\n\t *   string, surfaces can be represented by placeholders in the format specified\n\t *   by Component.SURFACE_REGEX.\n\t */\n\tgetSurfaceContent() {}\n\n\t/**\n\t * Gets the content for the requested surface. By default this just calls\n\t * `getSurfaceContent`, but can be overriden to add more behavior (check\n\t * `SoyComponent` for an example).\n\t * @param {string} surfaceElementId The surface element id.\n\t * @return {Object|string} The content to be rendered.\n\t * @protected\n\t */\n\tgetSurfaceContent_(surfaceElementId) {\n\t\tvar surface = this.getSurface(surfaceElementId);\n\t\tif (surfaceElementId === this.id) {\n\t\t\treturn this.getElementContent_();\n\t\t} else if (surface.componentName) {\n\t\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\t\tif (component.wasRendered) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\treturn component.getElementExtendedContent();\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.getSurfaceContent(this.getSurfaceId_(surfaceElementId, surface), surfaceElementId);\n\t\t}\n\t}\n\n\t/**\n\t * Queries from the document or creates an element for the surface. Surface\n\t * elements have its surface id namespaced to the component id, e.g. for a\n\t * component with id `gallery` and a surface with id `pictures` the surface\n\t * element will be represented by the id `gallery-pictures`. Surface\n\t * elements must also be appended to the component element.\n\t * @param {string} surfaceId The surface id.\n\t * @return {Element} The surface element or null if surface not registered.\n\t */\n\tgetSurfaceElement(surfaceId) {\n\t\tvar surface = this.getSurface(surfaceId);\n\t\tif (!surface) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!surface.element) {\n\t\t\tif (surface.componentName) {\n\t\t\t\tvar component = ComponentCollector.components[surfaceId];\n\t\t\t\tif (component) {\n\t\t\t\t\tsurface.element = component.element;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar surfaceElementId = this.getSurfaceElementId_(surfaceId, surface);\n\t\t\t\tsurface.element = this.findElementById_(surfaceElementId) ||\n\t\t\t\t\tthis.createSurfaceElement_(surfaceElementId);\n\t\t\t}\n\t\t}\n\t\treturn surface.element;\n\t}\n\n\t/**\n\t * Adds the component id as the prefix of the given surface id if necessary.\n\t * @param {string} surfaceId\n\t * @param {Object=} opt_surface The surface data.\n\t * @return {string}\n\t */\n\tgetSurfaceElementId_(surfaceId, opt_surface) {\n\t\tvar surface = opt_surface || {};\n\t\tif (surface.surfaceElementId) {\n\t\t\treturn surface.surfaceElementId;\n\t\t} else if (surface.componentName || this.hasComponentPrefix_(surfaceId)) {\n\t\t\treturn surfaceId;\n\t\t} else {\n\t\t\treturn this.prefixSurfaceId_(surfaceId);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the html that should be used to build a surface's main element with its\n\t * content.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetSurfaceHtml(surfaceElementId, content) {\n\t\tvar surface = this.getSurface(surfaceElementId);\n\t\tif (surface.componentName) {\n\t\t\treturn ComponentCollector.components[surfaceElementId].getComponentHtml(content);\n\t\t} else {\n\t\t\treturn this.getNonComponentSurfaceHtml(surfaceElementId, content);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the surface id for the given surface element id\n\t * @param {string} surfaceElementId\n\t * @param {!Object} surface\n\t * @return {string}\n\t * @protected\n\t */\n\tgetSurfaceId_(surfaceElementId, surface) {\n\t\tif (surface.componentName || !this.hasComponentPrefix_(surfaceElementId)) {\n\t\t\treturn surfaceElementId;\n\t\t} else {\n\t\t\treturn surfaceElementId.substr(this.id.length + 1);\n\t\t}\n\t}\n\n\t/**\n\t * A map of surface ids to the respective surface object.\n\t * @return {!Object}\n\t */\n\tgetSurfaces() {\n\t\tvar surfaces = {};\n\t\tObject.keys(this.surfaceIds_).forEach(function(surfaceElementId) {\n\t\t\tvar surface = Component.surfacesCollector.getSurface(surfaceElementId);\n\t\t\tsurfaces[this.getSurfaceId_(surfaceElementId, surface)] = surface;\n\t\t}.bind(this));\n\t\treturn surfaces;\n\t}\n\n\t/**\n\t * Handles attributes batch changes. Responsible for surface mutations and\n\t * attributes synchronization.\n\t * @param {Event} event\n\t * @protected\n\t */\n\thandleAttributesChanges_(event) {\n\t\tif (this.inDocument) {\n\t\t\tthis.renderSurfacesContent_(this.getModifiedSurfacesFromChanges_(event.changes));\n\t\t}\n\t\tthis.syncAttrsFromChanges_(event.changes);\n\t\tthis.emit('attrsSynced', event);\n\t}\n\n\t/**\n\t * Checks if the given surface id has this component's prefix.\n\t * @param {string} surfaceId\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasComponentPrefix_(surfaceId) {\n\t\treturn surfaceId.substr(0, this.id.length) === this.id &&\n\t\t\t(surfaceId.length === this.id.length || surfaceId[this.id.length] === '-');\n\t}\n\n\t/**\n\t * Fired when the `events` attribute value is changed.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tonEventsChanged_(event) {\n\t\tthis.eventsAttrHandler_.removeAllListeners();\n\t\tthis.addListenersFromObj_(event.newVal);\n\t}\n\n\t/**\n\t * Makes an unique id for the component.\n\t * @return {string} Unique id.\n\t * @protected\n\t */\n\tmakeId_() {\n\t\treturn 'metal_c_' + core.getUid(this);\n\t}\n\n\t/**\n\t * Merges an array of values for the ELEMENT_CLASSES property into a single object.\n\t * @param {!Array.<string>} values The values to be merged.\n\t * @return {!string} The merged value.\n\t * @protected\n\t */\n\tmergeElementClasses_(values) {\n\t\tvar marked = {};\n\t\treturn values.filter(function(val) {\n\t\t\tif (!val || marked[val]) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tmarked[val] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}).join(' ');\n\t}\n\n\t/**\n\t * Merges an array of objects into a single object. Used by the SURFACES static\n\t * variable.\n\t * @param {!Array} values The values to be merged.\n\t * @return {!Object} The merged value.\n\t * @protected\n\t */\n\tmergeObjects_(values) {\n\t\treturn object.mixin.apply(null, [{}].concat(values.reverse()));\n\t}\n\n\t/**\n\t * Prefixes the given surface id with this component's id.\n\t * @param {string} surfaceId\n\t * @return {string}\n\t * @protected\n\t */\n\tprefixSurfaceId_(surfaceId) {\n\t\treturn this.id + '-' + surfaceId;\n\t}\n\n\t/**\n\t * Unregisters a surface and removes its element from the DOM.\n\t * @param {string} surfaceId The surface id.\n\t * @chainable\n\t */\n\tremoveSurface(surfaceId) {\n\t\tvar el = this.getSurfaceElement(surfaceId);\n\t\tif (el && el.parentNode) {\n\t\t\tel.parentNode.removeChild(el);\n\t\t}\n\t\tvar surfaceElementId = this.getSurfaceElementId_(surfaceId, this.getSurface(surfaceId));\n\t\tComponent.surfacesCollector.removeSurface(surfaceElementId);\n\t\tthis.surfaceIds_[surfaceElementId] = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. Renders the component into the DOM. Render phase replaces\n\t * decorate phase, without progressive enhancement support.\n\t *\n\t * Render Lifecycle:\n\t *   render - Decorate is manually called.\n\t *   render surfaces - All surfaces content are rendered, including the\n\t *     main content (`getElementContent`).\n\t *   attribute synchronization - All synchronization methods are called.\n\t *   attach - Attach Lifecycle is called.\n\t *\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.render(null, existingElement)`.\n\t * @chainable\n\t */\n\trender(opt_parentElement, opt_siblingElement) {\n\t\tif (this.wasRendered) {\n\t\t\tthrow new Error(Component.Error.ALREADY_RENDERED);\n\t\t}\n\n\t\tthis.addElementSurface_();\n\t\tthis.renderSurfacesContent_(this.surfaceIds_);\n\n\t\tthis.syncAttrs_();\n\n\t\tthis.emit('render');\n\t\tthis.attach(opt_parentElement, opt_siblingElement);\n\n\t\tthis.wasRendered = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Renders this component as a subcomponent, meaning that no actual rendering is\n\t * needed since it was already rendered by the parent component. This just handles\n\t * other logics from the rendering lifecycle, like attaching event listeners.\n\t * @param {string} opt_content The content that has already been rendered for this\n\t *   component\n\t */\n\trenderAsSubComponent(opt_content) {\n\t\tthis.addElementSurface_();\n\t\tif (opt_content && dom.isEmpty(this.element)) {\n\t\t\t// If we have the rendered content for this component, but it hasn't\n\t\t\t// been rendered in its element yet, we render it manually here. That\n\t\t\t// can happen if the subcomponent's element is set before the parent\n\t\t\t// element renders its content, making originally rendered content be\n\t\t\t// set on the wrong place.\n\t\t\tthis.replaceElementContent_(opt_content);\n\t\t}\n\t\tthis.syncAttrs_();\n\t\tthis.attach();\n\t\tthis.wasRendered = true;\n\t}\n\n\t/**\n\t * Renders a surface that holds a component.\n\t * @param {string} surfaceElementId\n\t * @param {(Object|string)?} opt_content The content to be rendered.\n\t * @protected\n\t */\n\trenderComponentSurface_(surfaceElementId, opt_content) {\n\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\tif (component.wasRendered) {\n\t\t\tvar surface = this.getSurface(surfaceElementId);\n\t\t\tComponent.componentsCollector.updateComponent(surfaceElementId, surface.componentData);\n\t\t} else if (opt_content) {\n\t\t\tif (this.decorating_) {\n\t\t\t\tcomponent.decorateAsSubComponent(opt_content);\n\t\t\t} else {\n\t\t\t\tcomponent.renderAsSubComponent(opt_content);\n\t\t\t}\n\t\t} else {\n\t\t\tcomponent.render();\n\t\t}\n\t}\n\n\t/**\n\t * Renders the component element into the DOM.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.render(null, existingElement)`.\n\t * @protected\n\t */\n\trenderElement_(opt_parentElement, opt_siblingElement) {\n\t\tvar element = this.element;\n\t\telement.id = this.id;\n\t\tif (opt_siblingElement || !element.parentNode) {\n\t\t\tvar parent = dom.toElement(opt_parentElement) || this.DEFAULT_ELEMENT_PARENT;\n\t\t\tparent.insertBefore(element, dom.toElement(opt_siblingElement));\n\t\t}\n\t}\n\n\t/**\n\t * Renders the contents of all the surface placeholders found in the given content.\n\t * @param {string} content\n\t * @param {string} surfaceElementId The id of surface element the content is from.\n\t * @protected\n\t */\n\trenderPlaceholderSurfaceContents_(content, surfaceElementId) {\n\t\tvar instance = this;\n\t\tcontent.replace(Component.SURFACE_REGEX, function(match, id) {\n\t\t\tinstance.emitRenderSurfaceEvent_(instance.createPlaceholderSurface_(id, surfaceElementId));\n\t\t\treturn match;\n\t\t});\n\t}\n\n\t/**\n\t * Renders all surfaces contents ignoring the cache.\n\t * @param {Object.<string, Array=>} surfaces Object map where the key is\n\t *     the surface id and value the optional attributes list that caused\n\t *     the rerender.\n\t * @protected\n\t */\n\trenderSurfacesContent_(surfaces) {\n\t\tthis.generatedIdCount_ = {};\n\n\t\tvar surfaceElementIds = Object.keys(surfaces);\n\t\tvar idIndex = surfaceElementIds.indexOf(this.id);\n\t\tif (idIndex !== -1) {\n\t\t\t// Always render the main content surface first, for performance reasons.\n\t\t\tsurfaceElementIds.splice(idIndex, 1);\n\t\t\tsurfaceElementIds = [this.id].concat(surfaceElementIds);\n\t\t}\n\n\t\tfor (var i = 0; i < surfaceElementIds.length; i++) {\n\t\t\tif (!this.getSurface(surfaceElementIds[i]).handled) {\n\t\t\t\tvar renderAttrs = surfaces[surfaceElementIds[i]];\n\t\t\t\tif (!(renderAttrs instanceof Array)) {\n\t\t\t\t\trenderAttrs = null;\n\t\t\t\t}\n\t\t\t\tthis.emitRenderSurfaceEvent_(surfaceElementIds[i], null, null, renderAttrs);\n\t\t\t}\n\t\t}\n\t\tif (this.wasRendered) {\n\t\t\tthis.updatePlaceholderSurfaces_();\n\t\t\tthis.eventsCollector_.detachUnusedListeners();\n\t\t}\n\t}\n\n\t/**\n\t * Replaces the content of this component's element with the given one.\n\t * @param {string} content The content to be rendered.\n\t * @protected\n\t */\n\treplaceElementContent_(content) {\n\t\tvar element = this.element;\n\t\tvar newElement = this.findElementInContent_(this.id, content);\n\t\tif (newElement) {\n\t\t\tthis.updateElementAttributes_(element, newElement);\n\t\t\tcontent = newElement.childNodes;\n\t\t}\n\t\tdom.removeChildren(element);\n\t\tdom.append(element, content);\n\t}\n\n\t/**\n\t * Replaces the content of a surface with a new one.\n\t * @param {string} surfaceElementId The surface id.\n\t * @param {Element|string} content The content to be rendered.\n\t * @protected\n\t */\n\treplaceSurfaceContent_(surfaceElementId, content) {\n\t\tcontent = this.replaceSurfacePlaceholders_(content, surfaceElementId);\n\t\tif (surfaceElementId === this.id) {\n\t\t\tthis.replaceElementContent_(content);\n\t\t\treturn;\n\t\t}\n\n\t\tvar el = this.getSurfaceElement(surfaceElementId);\n\t\tif (this.checkHasElementTag_(content, surfaceElementId)) {\n\t\t\tvar surface = this.getSurface(surfaceElementId);\n\t\t\tsurface.element = content;\n\t\t\tif (core.isString(content)) {\n\t\t\t\tsurface.element = dom.buildFragment(content).childNodes[0];\n\t\t\t}\n\t\t\tif (el.parentNode) {\n\t\t\t\tdom.replace(el, surface.element);\n\t\t\t}\n\t\t} else {\n\t\t\tdom.removeChildren(el);\n\t\t\tdom.append(el, content);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces the given content's surface placeholders with their real contents.\n\t * @param {string|Element} content\n\t * @param {string=} opt_surfaceElementId The id of the surface element that contains\n\t *   the given content, or undefined if the content is from the main element.\n\t * @return {string} The final string with replaced placeholders.\n\t * @protected\n\t */\n\treplaceSurfacePlaceholders_(content, opt_surfaceElementId) {\n\t\tif (!core.isString(content)) {\n\t\t\treturn content;\n\t\t}\n\n\t\tvar instance = this;\n\t\treturn content.replace(Component.SURFACE_REGEX, function(match, id) {\n\t\t\t// Surfaces should already have been created before being rendered so they can be\n\t\t\t// accessed from their getSurfaceContent calls.\n\t\t\tid = instance.createPlaceholderSurface_(id, opt_surfaceElementId);\n\t\t\tinstance.getSurface(id).handled = true;\n\n\t\t\tvar surfaceContent = instance.getSurfaceContent_(id);\n\t\t\tvar surfaceHtml = instance.getSurfaceHtml(id, surfaceContent);\n\t\t\tvar expandedHtml = instance.replaceSurfacePlaceholders_(surfaceHtml, id);\n\t\t\tinstance.collectedSurfaces_.push({\n\t\t\t\tcacheContent: surfaceContent,\n\t\t\t\tcontent: expandedHtml,\n\t\t\t\tsurfaceElementId: id\n\t\t\t});\n\n\t\t\treturn expandedHtml;\n\t\t});\n\t}\n\n\t/**\n\t * Setter logic for element attribute.\n\t * @param {string|Element} val\n\t * @return {Element}\n\t * @protected\n\t */\n\tsetterElementFn_(val) {\n\t\tvar element = dom.toElement(val);\n\t\tif (!element) {\n\t\t\telement = this.valueElementFn_();\n\t\t}\n\t\treturn element;\n\t}\n\n\t/**\n\t * Attribute synchronization logic for the `elementClasses` attribute.\n\t * @param {string} newVal\n\t * @param {string} prevVal\n\t */\n\tsyncElementClasses(newVal, prevVal) {\n\t\tvar classesToAdd = this.constructor.ELEMENT_CLASSES_MERGED;\n\t\tif (newVal) {\n\t\t\tclassesToAdd = classesToAdd + ' ' + newVal;\n\t\t}\n\t\tif (prevVal) {\n\t\t\tdom.removeClasses(this.element, prevVal);\n\t\t}\n\t\tdom.addClasses(this.element, classesToAdd);\n\t}\n\n\t/**\n\t * Attribute synchronization logic for `visible` attribute.\n\t * Updates the element's display value according to its visibility.\n\t * @param {boolean} newVal\n\t */\n\tsyncVisible(newVal) {\n\t\tthis.element.style.display = newVal ? '' : 'none';\n\t}\n\n\t/**\n\t * Sets the attributes from the second element to the first element.\n\t * @param {!Element} element\n\t * @param {!Element} newElement\n\t * @protected\n\t */\n\tupdateElementAttributes_(element, newElement) {\n\t\tvar attrs = newElement.attributes;\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\t// The \"id\" and \"class\" html attributes are already synced via the \"id\"\n\t\t\t// and \"elementClasses\" component attributes, respectively.\n\t\t\tif (attrs[i].name !== 'id' && attrs[i].name !== 'class') {\n\t\t\t\telement.setAttribute(attrs[i].name, attrs[i].value);\n\t\t\t}\n\t\t}\n\n\t\tif (element.tagName !== newElement.tagName) {\n\t\t\tconsole.error(\n\t\t\t\t'The component named \"' + this.constructor.NAME + '\" tried to change the component ' +\n\t\t\t\t'element\\'s tag name, which is not allowed. Make sure to always return the same tag ' +\n\t\t\t\t'name for the component element on getElementContent. This may also have been caused by ' +\n\t\t\t\t'passing an element to this component with a different tag name from the one it uses.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a surface after it has been rendered through placeholders.\n\t * @param {!{content: string, cacheContent: string, surfaceElementId: string}} collectedData\n\t *   Data about the collected surface. Should have the surface's id, content and the\n\t *   content that should be cached for it.\n\t * @protected\n\t */\n\tupdatePlaceholderSurface_(collectedData) {\n\t\tvar surfaceElementId = collectedData.surfaceElementId;\n\t\tvar surface = this.getSurface(surfaceElementId);\n\t\tif (surface.componentName) {\n\t\t\t// Elements of component surfaces are unchangeable, so we need to replace the\n\t\t\t// rendered element with the component's.\n\t\t\tdom.replace(this.findElementById_(surfaceElementId), this.getSurfaceElement(surfaceElementId));\n\n\t\t\t// Component surfaces need to be handled in case some internal details have changed.\n\t\t\tthis.emitRenderSurfaceEvent_(surfaceElementId, collectedData.content, collectedData.cacheContent);\n\t\t} else {\n\t\t\t// This surface's element has either changed or never been created yet. Let's just\n\t\t\t// reset it to null, so it can be fetched from the dom again when necessary. Also,\n\t\t\t// since there's no need to do cache checks or rerender, let's just attach its\n\t\t\t// listeners and cache its content manually.\n\t\t\tsurface.element = null;\n\t\t\tthis.cacheSurfaceContent(surfaceElementId, collectedData.cacheContent);\n\t\t\tthis.eventsCollector_.attachListeners(collectedData.cacheContent, surfaceElementId);\n\t\t}\n\t}\n\n\t/**\n\t * Updates all collected surfaces.\n\t * @protected\n\t */\n\tupdatePlaceholderSurfaces_() {\n\t\tfor (var i = this.collectedSurfaces_.length - 1; i >= 0; i--) {\n\t\t\tthis.updatePlaceholderSurface_(this.collectedSurfaces_[i]);\n\t\t\tthis.getSurface(this.collectedSurfaces_[i].surfaceElementId).handled = false;\n\t\t}\n\t\tthis.collectedSurfaces_ = [];\n\t}\n\n\t/**\n\t * Validator logic for element attribute.\n\t * @param {string|Element} val\n\t * @return {boolean} True if val is a valid element.\n\t * @protected\n\t */\n\tvalidatorElementFn_(val) {\n\t\treturn core.isElement(val) || core.isString(val);\n\t}\n\n\t/**\n\t * Validator logic for elementClasses attribute.\n\t * @param {string} val\n\t * @return {boolean} True if val is a valid element classes.\n\t * @protected\n\t */\n\tvalidatorElementClassesFn_(val) {\n\t\treturn core.isString(val);\n\t}\n\n\t/**\n\t * Validator logic for the `events` attribute.\n\t * @param {Object} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorEventsFn_(val) {\n\t\treturn !core.isDefAndNotNull(val) || core.isObject(val);\n\t}\n\n\t/**\n\t * Validator logic for the `id` attribute.\n\t * @param {string} val\n\t * @return {boolean} True if val is a valid id.\n\t * @protected\n\t */\n\tvalidatorIdFn_(val) {\n\t\treturn core.isString(val);\n\t}\n\n\t/**\n\t * Provides the default value for element attribute.\n\t * @return {!Element} The element.\n\t * @protected\n\t */\n\tvalueElementFn_() {\n\t\tif (!this.id) {\n\t\t\t// This may happen because the default value of \"id\" depends on \"element\",\n\t\t\t// and the default value of \"element\" depends on \"id\".\n\t\t\tthis.id = this.makeId_();\n\t\t}\n\t\tvar element = this.findElementInContent_(this.id, this.getElementContent_());\n\t\tif (!element) {\n\t\t\telement = this.findElementInContent_(this.id, this.getComponentHtml(''));\n\t\t}\n\t\tdom.removeChildren(element);\n\t\tdom.exitDocument(element);\n\t\treturn element;\n\t}\n\n\t/**\n\t * Provides the default value for id attribute.\n\t * @return {string} The id.\n\t * @protected\n\t */\n\tvalueIdFn_() {\n\t\tvar element = this.element;\n\t\treturn (element && element.id) ? element.id : this.makeId_();\n\t}\n\n\t/**\n\t * Wraps the content with the given tag, unless the content already has an element with the\n\t * correct id.\n\t * @param {string} content\n\t * @param {string} id\n\t * @param {string} tag\n\t * @return {string}\n\t * @protected\n\t */\n\twrapContentIfNecessary(content, id, tag) {\n\t\tif (!this.checkHasElementTag_(content, id)) {\n\t\t\tcontent = '<' + tag + ' id=\"' + id + '\">' + content + '</' + tag + '>';\n\t\t}\n\t\treturn content;\n\t}\n}\n\n/**\n * Helper responsible for extracting components from strings and config data.\n * @type {!ComponentCollector}\n * @protected\n * @static\n */\nComponent.componentsCollector = new ComponentCollector();\n\n/**\n * Helper responsible for temporarily holding surface data.\n * @type {!SurfaceCollector}\n * @protected\n * @static\n */\nComponent.surfacesCollector = new SurfaceCollector();\n\n/**\n * Component attributes definition.\n * @type {Object}\n * @static\n */\nComponent.ATTRS = {\n\t/**\n\t * Component element bounding box.\n\t * @type {Element}\n\t * @writeOnce\n\t */\n\telement: {\n\t\tsetter: 'setterElementFn_',\n\t\tvalidator: 'validatorElementFn_',\n\t\tvalueFn: 'valueElementFn_',\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @type {Array.<string>}\n\t */\n\telementClasses: {\n\t\tvalidator: 'validatorElementClassesFn_'\n\t},\n\n\t/**\n\t * Listeners that should be attached to this component. Should be provided as an object,\n\t * where the keys are event names and the values are the listener functions (or function\n\t * names).\n\t * @type {Object<string, (function()|string|{selector: string, fn: function()|string})>}\n\t */\n\tevents: {\n\t\tvalidator: 'validatorEventsFn_',\n\t\tvalue: null\n\t},\n\n\t/**\n\t * Component element id. If not specified will be generated.\n\t * @type {string}\n\t * @writeOnce\n\t */\n\tid: {\n\t\tvalidator: 'validatorIdFn_',\n\t\tvalueFn: 'valueIdFn_',\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * Indicates if the component is visible or not.\n\t * @type {boolean}\n\t */\n\tvisible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t}\n};\n\n/**\n * CSS classes to be applied to the element.\n * @type {string}\n * @protected\n * @static\n */\nComponent.ELEMENT_CLASSES = 'component';\n\n/**\n * Element tag name is a string that specifies the type of element to be\n * created. The nodeName of the created element is initialized with the\n * value of tag name.\n * @type {string}\n * @default div\n * @protected\n * @static\n */\nComponent.ELEMENT_TAG_NAME = 'div';\n\n/**\n * The regex used to search for surface placeholders.\n * @type {RegExp}\n * @static\n */\nComponent.SURFACE_REGEX = /\\%\\%\\%\\%~s(?:-([^~:]+))?~\\%\\%\\%\\%/g;\n\n/**\n * Surface tag name is a string that specifies the type of element to be\n * created for the surfaces. The nodeName of the created element is\n * initialized with the value of tag name.\n * @type {string}\n * @default div\n * @protected\n * @static\n */\nComponent.SURFACE_TAG_NAME = 'div';\n\n/**\n * Cache states for the component.\n * @enum {string}\n */\nComponent.Cache = {\n\t/**\n\t * Cache is not allowed for this state.\n\t */\n\tNOT_CACHEABLE: -1,\n\n\t/**\n\t * Cache not initialized.\n\t */\n\tNOT_INITIALIZED: -2\n};\n\n/**\n * Errors thrown by the component.\n * @enum {string}\n */\nComponent.Error = {\n\t/**\n\t * Error when the component is already rendered and another render attempt\n\t * is made.\n\t */\n\tALREADY_RENDERED: 'Component already rendered'\n};\n\n/**\n * A list with attribute names that will automatically be rejected as invalid.\n * @type {!Array<string>}\n */\nComponent.INVALID_ATTRS = ['components', 'elementContent'];\n\nexport default Component;\n"],"sourceRoot":"/source/"}