{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal/src/core.js"],"names":[],"mappings":";AAAA,aAAY,CAAC;;;;;;;;;;;KAMP,IAAI;WAAJ,IAAI;yBAAJ,IAAI;;;;;;;;;eAAJ,IAAI;;;;;;;;;;;;;UAWY,0BAAG;AACvB,UAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAC7C;;;;;;;;;;;;;UAWiC,qCAAC,WAAW,EAAE,YAAY,EAAE;AAC7D,QAAI,cAAc,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;AACjD,WAAO,WAAW,CAAC,SAAS,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;AAC/E,gBAAW,GAAG,WAAW,CAAC,SAAS,CAAC;AACpC,mBAAc,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;KAC/C;AACD,WAAO,cAAc,CAAC;IACtB;;;;;;;;;;;;;UAWY,gBAAC,UAAU,EAAE;AACzB,QAAI,UAAU,EAAE;AACf,YAAO,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,KAClC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAA,AAAC,CAAC;KAC3D;AACD,WAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC/B;;;;;;;;;UAOsB,0BAAC,eAAe,EAAE;AACxC,WAAO,eAAe,CAAC;IACvB;;;;;;;;;UAOe,mBAAC,GAAG,EAAE;AACrB,WAAO,OAAO,GAAG,KAAK,SAAS,CAAC;IAChC;;;;;;;;;UAOW,eAAC,GAAG,EAAE;AACjB,WAAO,GAAG,KAAK,SAAS,CAAC;IACzB;;;;;;;;;UAOqB,yBAAC,GAAG,EAAE;AAC3B,WAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC5C;;;;;;;;;UAOgB,oBAAC,GAAG,EAAE;AACtB,WAAO,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAAC;IAC5D;;;;;;;;;UAOe,mBAAC,GAAG,EAAE;AACrB,WAAO,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAAC;IAC5D;;;;;;;;;UAOgB,oBAAC,GAAG,EAAE;AACtB,WAAO,OAAO,GAAG,KAAK,UAAU,CAAC;IACjC;;;;;;;;;UAOY,gBAAC,GAAG,EAAE;AAClB,WAAO,GAAG,KAAK,IAAI,CAAC;IACpB;;;;;;;;;UAOc,kBAAC,GAAG,EAAE;AACpB,WAAO,OAAO,GAAG,KAAK,QAAQ,CAAC;IAC/B;;;;;;;;;UAOc,kBAAC,GAAG,EAAE;AACpB,WAAO,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC;IAC1C;;;;;;;;;;UAQc,kBAAC,GAAG,EAAE;AACpB,QAAI,IAAI,GAAG,OAAO,GAAG,CAAC;AACtB,WAAO,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,KAAK,UAAU,CAAC;IAChE;;;;;;;;;UAOc,kBAAC,GAAG,EAAE;AACpB,WAAO,OAAO,GAAG,KAAK,QAAQ,CAAC;IAC/B;;;;;;;;;;;;;;;;UAc+B,mCAAC,WAAW,EAAE,YAAY,EAAE,WAAW,EAAE;AACxE,QAAI,UAAU,GAAG,YAAY,GAAG,SAAS,CAAC;AAC1C,QAAI,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;AAC3C,YAAO,KAAK,CAAC;KACb;;AAED,QAAI,MAAM,GAAG,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AACzE,QAAI,WAAW,EAAE;AAChB,WAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;KAC7B;AACD,eAAW,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;AACjC,WAAO,IAAI,CAAC;IACZ;;;;;;;;UAMkB,wBAAG,EAAE;;;SA9LnB,IAAI;;;AAsMV,KAAI,CAAC,YAAY,GAAG,OAAO,IAAI,AAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,KAAM,CAAC,CAAA,AAAC,CAAC;;;;;;;AAO5D,KAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;;kBAEX,IAAI","file":"bower_components/metal/src/core.js","sourcesContent":["'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\nclass core {\n\t/**\n\t * When defining a class Foo with an abstract method bar(), you can do:\n\t * Foo.prototype.bar = core.abstractMethod\n\t *\n\t * Now if a subclass of Foo fails to override bar(), an error will be thrown\n\t * when bar() is invoked.\n\t *\n\t * @type {!Function}\n\t * @throws {Error} when invoked to indicate the method should be overridden.\n\t */\n\tstatic abstractMethod() {\n\t\tthrow Error('Unimplemented abstract method');\n\t}\n\n\t/**\n\t * Loops constructor super classes collecting its properties values. If\n\t * property is not available on the super class `undefined` will be\n\t * collected as value for the class hierarchy position.\n\t * @param {!function()} constructor Class constructor.\n\t * @param {string} propertyName Property name to be collected.\n\t * @return {Array.<*>} Array of collected values.\n\t * TODO(*): Rethink superclass loop.\n\t */\n\tstatic collectSuperClassesProperty(constructor, propertyName) {\n\t\tvar propertyValues = [constructor[propertyName]];\n\t\twhile (constructor.__proto__ && !constructor.__proto__.isPrototypeOf(Function)) {\n\t\t\tconstructor = constructor.__proto__;\n\t\t\tpropertyValues.push(constructor[propertyName]);\n\t\t}\n\t\treturn propertyValues;\n\t}\n\n\t/**\n\t * Gets an unique id. If `opt_object` argument is passed, the object is\n\t * mutated with an unique id. Consecutive calls with the same object\n\t * reference won't mutate the object again, instead the current object uid\n\t * returns. See {@link core.UID_PROPERTY}.\n\t * @type {opt_object} Optional object to be mutated with the uid. If not\n\t *     specified this method only returns the uid.\n\t * @throws {Error} when invoked to indicate the method should be overridden.\n\t */\n\tstatic getUid(opt_object) {\n\t\tif (opt_object) {\n\t\t\treturn opt_object[core.UID_PROPERTY] ||\n\t\t\t\t(opt_object[core.UID_PROPERTY] = core.uniqueIdCounter_++);\n\t\t}\n\t\treturn core.uniqueIdCounter_++;\n\t}\n\n\t/**\n\t * The identity function. Returns its first argument.\n\t * @param {*=} opt_returnValue The single value that will be returned.\n\t * @return {?} The first argument.\n\t */\n\tstatic identityFunction(opt_returnValue) {\n\t\treturn opt_returnValue;\n\t}\n\n\t/**\n\t * Returns true if the specified value is a boolean.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is boolean.\n\t */\n\tstatic isBoolean(val) {\n\t\treturn typeof val === 'boolean';\n\t}\n\n\t/**\n\t * Returns true if the specified value is not undefined.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is defined.\n\t */\n\tstatic isDef(val) {\n\t\treturn val !== undefined;\n\t}\n\n\t/**\n\t * Returns true if value is not undefined or null.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isDefAndNotNull(val) {\n\t\treturn core.isDef(val) && !core.isNull(val);\n\t}\n\n\t/**\n\t * Returns true if value is a document.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isDocument(val) {\n\t\treturn val && typeof val === 'object' && val.nodeType === 9;\n\t}\n\n\t/**\n\t * Returns true if value is a dom element.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isElement(val) {\n\t\treturn val && typeof val === 'object' && val.nodeType === 1;\n\t}\n\n\t/**\n\t * Returns true if the specified value is a function.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is a function.\n\t */\n\tstatic isFunction(val) {\n\t\treturn typeof val === 'function';\n\t}\n\n\t/**\n\t * Returns true if value is null.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isNull(val) {\n\t\treturn val === null;\n\t}\n\n\t/**\n\t * Returns true if the specified value is a number.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is a number.\n\t */\n\tstatic isNumber(val) {\n\t\treturn typeof val === 'number';\n\t}\n\n\t/**\n\t * Returns true if value is a window.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isWindow(val) {\n\t\treturn val !== null && val === val.window;\n\t}\n\n\t/**\n\t * Returns true if the specified value is an object. This includes arrays\n\t * and functions.\n\t * @param {?} val Variable to test.\n\t * @return {boolean} Whether variable is an object.\n\t */\n\tstatic isObject(val) {\n\t\tvar type = typeof val;\n\t\treturn type === 'object' && val !== null || type === 'function';\n\t}\n\n\t/**\n\t * Returns true if value is a string.\n\t * @param {*} val\n\t * @return {Boolean}\n\t */\n\tstatic isString(val) {\n\t\treturn typeof val === 'string';\n\t}\n\n\t/**\n\t * Merges the values of a static property a class with the values of that\n\t * property for all its super classes, and stores it as a new static\n\t * property of that class. If the static property already existed, it won't\n\t * be recalculated.\n\t * @param {!function()} constructor Class constructor.\n\t * @param {string} propertyName Property name to be collected.\n\t * @param {function(*, *):*=} opt_mergeFn Function that receives an array filled\n\t *   with the values of the property for the current class and all its super classes.\n\t *   Should return the merged value to be stored on the current class.\n\t * @return {boolean} Returns true if merge happens, false otherwise.\n\t */\n\tstatic mergeSuperClassesProperty(constructor, propertyName, opt_mergeFn) {\n\t\tvar mergedName = propertyName + '_MERGED';\n\t\tif (constructor.hasOwnProperty(mergedName)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar merged = core.collectSuperClassesProperty(constructor, propertyName);\n\t\tif (opt_mergeFn) {\n\t\t\tmerged = opt_mergeFn(merged);\n\t\t}\n\t\tconstructor[mergedName] = merged;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Null function used for default values of callbacks, etc.\n\t * @return {void} Nothing.\n\t */\n\tstatic nullFunction() {}\n}\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\ncore.UID_PROPERTY = 'core_' + ((Math.random() * 1e9) >>> 0);\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\ncore.uniqueIdCounter_ = 1;\n\nexport default core;\n"],"sourceRoot":"/source/"}