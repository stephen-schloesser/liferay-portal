{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal/src/events/EventEmitterProxy.js"],"names":[],"mappings":"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","file":"bower_components/metal/src/events/EventEmitterProxy.js","sourcesContent":["'use strict';\n\nimport core from '../core';\nimport dom from '../dom/dom';\nimport Disposable from '../disposable/Disposable';\n\n/**\n * EventEmitterProxy utility. It's responsible for linking two EventEmitter\n * instances together, emitting events from the first emitter through the\n * second one. That means that listening to a supported event on the target\n * emitter will mean listening to it on the origin emitter as well.\n * @param {EventEmitter | Element} originEmitter Events originated on this emitter\n *   will be fired for the target emitter's listeners as well. Can be either a real\n *   EventEmitter instance or a DOM element.\n * @param {EventEmitter} targetEmitter Event listeners attached to this emitter\n *   will also be triggered when the event is fired by the origin emitter.\n * @param {Object} opt_blacklist Optional blacklist of events that should not be\n *   proxied.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitterProxy extends Disposable {\n\tconstructor(originEmitter, targetEmitter, opt_blacklist, opt_whitelist) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Map of events that should not be proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.blacklist_ = opt_blacklist || {};\n\n\t\t/**\n\t\t * The origin emitter. This emitter's events will be proxied through the\n\t\t * target emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.originEmitter_ = originEmitter;\n\n\t\t/**\n\t\t * Holds a map of events from the origin emitter that are already being proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.proxiedEvents_ = {};\n\n\t\t/**\n\t\t * The target emitter. This emitter will emit all events that come from\n\t\t * the origin emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.targetEmitter_ = targetEmitter;\n\n\t\t/**\n\t\t * Map of events that should be proxied. If whitelist is set blacklist is ignored.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.whitelist_ = opt_whitelist;\n\n\t\tthis.startProxy_();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tvar removeFnName = this.originEmitter_.removeEventListener ? 'removeEventListener' : 'removeListener';\n\t\tfor (var event in this.proxiedEvents_) {\n\t\t\tthis.originEmitter_[removeFnName](event, this.proxiedEvents_[event]);\n\t\t}\n\n\t\tthis.proxiedEvents_ = null;\n\t\tthis.originEmitter_ = null;\n\t\tthis.targetEmitter_ = null;\n\t}\n\n\t/**\n\t * Proxies the given event from the origin to the target emitter.\n\t * @param {string} event\n\t */\n\tproxyEvent_(event) {\n\t\tif (!this.shouldProxyEvent_(event)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar self = this;\n\t\tthis.proxiedEvents_[event] = function() {\n\t\t\tvar args = [event].concat(Array.prototype.slice.call(arguments, 0));\n\t\t\tself.targetEmitter_.emit.apply(self.targetEmitter_, args);\n\t\t};\n\n\t\tif (core.isElement(this.originEmitter_) || core.isDocument(this.originEmitter_)) {\n\t\t\tdom.on(this.originEmitter_, event, this.proxiedEvents_[event]);\n\t\t} else {\n\t\t\tthis.originEmitter_.on(event, this.proxiedEvents_[event]);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldProxyEvent_(event) {\n\t\tif (this.whitelist_ && !this.whitelist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.blacklist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.proxiedEvents_[event] &&\n\t\t\t(!(this.originEmitter_.removeEventListener || this.originEmitter_.addEventListener) ||\n\t\t\tdom.supportsEvent(this.originEmitter_, event));\n\t}\n\n\t/**\n\t * Starts proxying all events from the origin to the target emitter.\n\t * @protected\n\t */\n\tstartProxy_() {\n\t\tthis.targetEmitter_.on('newListener', this.proxyEvent_.bind(this));\n\t}\n}\n\nexport default EventEmitterProxy;\n"],"sourceRoot":"/source/"}