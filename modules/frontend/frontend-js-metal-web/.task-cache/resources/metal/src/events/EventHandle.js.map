{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal/src/events/EventHandle.js"],"names":[],"mappings":";AAAA,aAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgBP,WAAW;YAAX,WAAW;;AACL,WADN,WAAW,CACJ,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE;yBADjC,WAAW;;AAEf,8BAFI,WAAW,6CAEP;;;;;;;AAOR,OAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;;;;;;AAOxB,OAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;;;;;;AAOpB,OAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;GAC1B;;;;;;;eAxBI,WAAW;;UA8BD,2BAAG;AACjB,QAAI,CAAC,cAAc,EAAE,CAAC;AACtB,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACtB;;;;;;;UAKa,0BAAG;AAChB,QAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE;AAChC,SAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KAC1D;IACD;;;SA3CI,WAAW;;;kBA8CF,WAAW","file":"bower_components/metal/src/events/EventHandle.js","sourcesContent":["'use strict';\n\nimport Disposable from '../disposable/Disposable';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n * @param {string} event The name of the event that was subscribed to.\n * @param {!Function} listener The listener subscribed to the event.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n"],"sourceRoot":"/source/"}