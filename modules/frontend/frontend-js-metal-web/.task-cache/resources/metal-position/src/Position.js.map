{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal-position/src/Position.js"],"names":[],"mappings":"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","file":"bower_components/metal-position/src/Position.js","sourcesContent":["'use strict';\n\nimport core from 'bower:metal/src/core';\nimport Geometry from './Geometry';\n\n/**\n * Class with static methods responsible for doing browser position checks.\n */\nclass Position {\n\t/**\n\t * Gets the client height of the specified node. Scroll height is not\n\t * included.\n\t * @param {Element|Document|Window=} node\n\t * @return {number}\n\t */\n\tstatic getClientHeight(node) {\n\t\treturn this.getClientSize_(node, 'Height');\n\t}\n\n\t/**\n\t * Gets the client height or width of the specified node. Scroll height is\n\t * not included.\n\t * @param {Element|Document|Window=} node\n\t * @param {string} `Width` or `Height` property.\n\t * @return {number}\n\t * @protected\n\t */\n\tstatic getClientSize_(node, prop) {\n\t\tvar el = node;\n\t\tif (core.isWindow(node)) {\n\t\t\tel = node.document.documentElement;\n\t\t}\n\t\tif (core.isDocument(node)) {\n\t\t\tel = node.documentElement;\n\t\t}\n\t\treturn el['client' + prop];\n\t}\n\n\t/**\n\t * Gets the client width of the specified node. Scroll width is not\n\t * included.\n\t * @param {Element|Document|Window=} node\n\t * @return {number}\n\t */\n\tstatic getClientWidth(node) {\n\t\treturn this.getClientSize_(node, 'Width');\n\t}\n\n\t/**\n\t * Gets the region of the element, document or window.\n\t * @param {Element|Document|Window=} opt_element Optional element to test.\n\t * @return {!DOMRect} The returned value is a simulated DOMRect object which\n\t *     is the union of the rectangles returned by getClientRects() for the\n\t *     element, i.e., the CSS border-boxes associated with the element.\n\t * @protected\n\t */\n\tstatic getDocumentRegion_(opt_element) {\n\t\tvar height = this.getHeight(opt_element);\n\t\tvar width = this.getWidth(opt_element);\n\t\treturn this.makeRegion(height, height, 0, width, 0, width);\n\t}\n\n\t/**\n\t * Gets the height of the specified node. Scroll height is included.\n\t * @param {Element|Document|Window=} node\n\t * @return {number}\n\t */\n\tstatic getHeight(node) {\n\t\treturn this.getSize_(node, 'Height');\n\t}\n\n\t/**\n\t * Gets the top offset position of the given node. This fixes the `offsetLeft` value of\n\t * nodes that were translated, which don't take that into account at all. That makes\n\t * the calculation more expensive though, so if you don't want that to be considered\n\t * either pass `opt_ignoreTransform` as true or call `offsetLeft` directly on the node.\n\t * @param {!Element} node\n\t * @param {boolean=} opt_ignoreTransform When set to true will ignore transform css\n\t *   when calculating the position. Defaults to false.\n\t * @return {number}\n\t */\n\tstatic getOffsetLeft(node, opt_ignoreTransform) {\n\t\treturn node.offsetLeft + (opt_ignoreTransform ? 0 : Position.getTranslation(node).left);\n\t}\n\n\t/**\n\t * Gets the top offset position of the given node. This fixes the `offsetTop` value of\n\t * nodes that were translated, which don't take that into account at all. That makes\n\t * the calculation more expensive though, so if you don't want that to be considered\n\t * either pass `opt_ignoreTransform` as true or call `offsetTop` directly on the node.\n\t * @param {!Element} node\n\t * @param {boolean=} opt_ignoreTransform When set to true will ignore transform css\n\t *   when calculating the position. Defaults to false.\n\t * @return {number}\n\t */\n\tstatic getOffsetTop(node, opt_ignoreTransform) {\n\t\treturn node.offsetTop + (opt_ignoreTransform ? 0 : Position.getTranslation(node).top);\n\t}\n\n\t/**\n\t * Gets the size of an element and its position relative to the viewport.\n\t * @param {!Document|Element|Window} node\n\t * @param {boolean=} opt_includeScroll Flag indicating if the document scroll\n\t *   position should be considered in the element's region coordinates. Defaults\n\t *   to false.\n\t * @return {!DOMRect} The returned value is a DOMRect object which is the\n\t *     union of the rectangles returned by getClientRects() for the element,\n\t *     i.e., the CSS border-boxes associated with the element.\n\t */\n\tstatic getRegion(node, opt_includeScroll) {\n\t\tif (core.isDocument(node) || core.isWindow(node)) {\n\t\t\treturn this.getDocumentRegion_(node);\n\t\t}\n\t\treturn this.makeRegionFromBoundingRect_(node.getBoundingClientRect(), opt_includeScroll);\n\t}\n\n\t/**\n\t * Gets the scroll left position of the specified node.\n\t * @param {Element|Document|Window=} node\n\t * @return {number}\n\t */\n\tstatic getScrollLeft(node) {\n\t\tif (core.isWindow(node)) {\n\t\t\treturn node.pageXOffset;\n\t\t}\n\t\tif (core.isDocument(node)) {\n\t\t\treturn node.defaultView.pageXOffset;\n\t\t}\n\t\treturn node.scrollLeft;\n\t}\n\n\t/**\n\t * Gets the scroll top position of the specified node.\n\t * @param {Element|Document|Window=} node\n\t * @return {number}\n\t */\n\tstatic getScrollTop(node) {\n\t\tif (core.isWindow(node)) {\n\t\t\treturn node.pageYOffset;\n\t\t}\n\t\tif (core.isDocument(node)) {\n\t\t\treturn node.defaultView.pageYOffset;\n\t\t}\n\t\treturn node.scrollTop;\n\t}\n\n\t/**\n\t * Gets the height or width of the specified node. Scroll height is\n\t * included.\n\t * @param {Element|Document|Window=} node\n\t * @param {string} `Width` or `Height` property.\n\t * @return {number}\n\t * @protected\n\t */\n\tstatic getSize_(node, prop) {\n\t\tif (core.isWindow(node)) {\n\t\t\treturn this.getClientSize_(node, prop);\n\t\t}\n\t\tif (core.isDocument(node)) {\n\t\t\tvar docEl = node.documentElement;\n\t\t\treturn Math.max(\n\t\t\t\tnode.body['scroll' + prop], docEl['scroll' + prop],\n\t\t\t\tnode.body['offset' + prop], docEl['offset' + prop], docEl['client' + prop]);\n\t\t}\n\t\treturn Math.max(node['client' + prop], node['scroll' + prop], node['offset' + prop]);\n\t}\n\n\t/**\n\t * Gets the transform matrix values for the given node.\n\t * @param {!Element} node\n\t * @return {Array<number>}\n\t */\n\tstatic getTransformMatrixValues(node) {\n\t\tvar style = getComputedStyle(node);\n\t\tvar transform = style.msTransform || style.transform || style.webkitTransform || style.mozTransform;\n\t\tif (transform !== 'none') {\n\t\t\tvar values = [];\n\t\t\tvar regex = /([\\d-\\.\\s]+)/g;\n\t\t\tvar matches = regex.exec(transform);\n\t\t\twhile (matches) {\n\t\t\t\tvalues.push(matches[1]);\n\t\t\t\tmatches = regex.exec(transform);\n\t\t\t}\n\t\t\treturn values;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the number of translated pixels for the given node, for both the top and\n\t * left positions.\n\t * @param {!Element} node\n\t * @return {number}\n\t */\n\tstatic getTranslation(node) {\n\t\tvar values = Position.getTransformMatrixValues(node);\n\t\tvar translation = {\n\t\t\tleft: 0,\n\t\t\ttop: 0\n\t\t};\n\t\tif (values) {\n\t\t\ttranslation.left = parseFloat(values.length === 6 ? values[4] : values[13]);\n\t\t\ttranslation.top = parseFloat(values.length === 6 ? values[5] : values[14]);\n\t\t}\n\t\treturn translation;\n\t}\n\n\t/**\n\t * Gets the width of the specified node. Scroll width is included.\n\t * @param {Element|Document|Window=} node\n\t * @return {number}\n\t */\n\tstatic getWidth(node) {\n\t\treturn this.getSize_(node, 'Width');\n\t}\n\n\t/**\n\t * Tests if a region intersects with another.\n\t * @param {DOMRect} r1\n\t * @param {DOMRect} r2\n\t * @return {boolean}\n\t */\n\tstatic intersectRegion(r1, r2) {\n\t\treturn Geometry.intersectRect(\n\t\t\tr1.top, r1.left, r1.bottom, r1.right,\n\t\t\tr2.top, r2.left, r2.bottom, r2.right);\n\t}\n\n\t/**\n\t * Tests if a region is inside another.\n\t * @param {DOMRect} r1\n\t * @param {DOMRect} r2\n\t * @return {boolean}\n\t */\n\tstatic insideRegion(r1, r2) {\n\t\treturn (r2.top >= r1.top) && (r2.bottom <= r1.bottom) &&\n\t\t\t(r2.right <= r1.right) && (r2.left >= r1.left);\n\t}\n\n\t/**\n\t * Tests if a region is inside viewport region.\n\t * @param {DOMRect} region\n\t * @return {boolean}\n\t */\n\tstatic insideViewport(region) {\n\t\treturn this.insideRegion(this.getRegion(window), region);\n\t}\n\n\t/**\n\t * Computes the intersection region between two regions.\n\t * @param {DOMRect} r1\n\t * @param {DOMRect} r2\n\t * @return {?DOMRect} Intersection region or null if regions doesn't\n\t *     intersects.\n\t */\n\tstatic intersection(r1, r2) {\n\t\tif (!this.intersectRegion(r1, r2)) {\n\t\t\treturn null;\n\t\t}\n\t\tvar bottom = Math.min(r1.bottom, r2.bottom);\n\t\tvar right = Math.min(r1.right, r2.right);\n\t\tvar left = Math.max(r1.left, r2.left);\n\t\tvar top = Math.max(r1.top, r2.top);\n\t\treturn this.makeRegion(bottom, bottom - top, left, right, top, right - left);\n\t}\n\n\t/**\n\t * Makes a region object. It's a writable version of DOMRect.\n\t * @param {number} bottom\n\t * @param {number} height\n\t * @param {number} left\n\t * @param {number} right\n\t * @param {number} top\n\t * @param {number} width\n\t * @return {!DOMRect} The returned value is a DOMRect object which is the\n\t *     union of the rectangles returned by getClientRects() for the element,\n\t *     i.e., the CSS border-boxes associated with the element.\n\t */\n\tstatic makeRegion(bottom, height, left, right, top, width) {\n\t\treturn {\n\t\t\tbottom: bottom,\n\t\t\theight: height,\n\t\t\tleft: left,\n\t\t\tright: right,\n\t\t\ttop: top,\n\t\t\twidth: width\n\t\t};\n\t}\n\n\t/**\n\t * Makes a region from a DOMRect result from `getBoundingClientRect`.\n\t * @param  {!DOMRect} The returned value is a DOMRect object which is the\n\t *     union of the rectangles returned by getClientRects() for the element,\n\t *     i.e., the CSS border-boxes associated with the element.\n\t * @param {boolean=} opt_includeScroll Flag indicating if the document scroll\n\t *   position should be considered in the element's region coordinates. Defaults\n\t *   to false.\n\t * @return {DOMRect} Writable version of DOMRect.\n\t * @protected\n\t */\n\tstatic makeRegionFromBoundingRect_(rect, opt_includeScroll) {\n\t\tvar deltaX = opt_includeScroll ? Position.getScrollLeft(document) : 0;\n\t\tvar deltaY = opt_includeScroll ? Position.getScrollTop(document) : 0;\n\t\treturn this.makeRegion(\n\t\t\trect.bottom + deltaY,\n\t\t\trect.height,\n\t\t\trect.left + deltaX,\n\t\t\trect.right + deltaX,\n\t\t\trect.top + deltaY,\n\t\t\trect.width\n\t\t);\n\t}\n\n\t/**\n\t * Checks if the given point coordinates are inside a region.\n\t * @param {number} x\n\t * @param {number} y\n\t * @param {!Object} region\n\t * @return {boolean}\n\t */\n\tstatic pointInsideRegion(x, y, region) {\n\t\treturn Position.insideRegion(region, Position.makeRegion(y, 0, x, x, y, 0));\n\t}\n}\n\nexport default Position;\n"],"sourceRoot":"/source/"}