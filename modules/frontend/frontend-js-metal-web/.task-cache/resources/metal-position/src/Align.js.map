{"version":3,"sources":["D:/Projects/Liferay/portal/modules/frontend/frontend-js-metal-web/bower_components/metal-position/src/Align.js"],"names":[],"mappings":";AAAA,aAAY,CAAC;;;;;;;;;;;;;;;;;KAUP,KAAK;WAAL,KAAK;yBAAL,KAAK;;;;;;;;;;eAAL,KAAK;;;;;;;;;;;;;;;UAcE,eAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE;AAC7C,QAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;;AAE1E,QAAI,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC3D,QAAI,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;AAC3D,eAAU,CAAC,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC;AACrC,eAAU,CAAC,IAAI,IAAI,MAAM,CAAC,WAAW,CAAC;;AAEtC,SAAI,YAAY,GAAG,OAAO,CAAC;AAC3B,YAAQ,YAAY,GAAG,YAAY,CAAC,YAAY,EAAG;AAClD,gBAAU,CAAC,GAAG,IAAI,qBAAS,YAAY,CAAC,YAAY,CAAC,CAAC;AACtD,gBAAU,CAAC,IAAI,IAAI,qBAAS,aAAa,CAAC,YAAY,CAAC,CAAC;MACxD;KACD;;AAED,WAAO,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC;AAC1C,WAAO,CAAC,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;IAC5C;;;;;;;;;;;;;;;;;UAewB,4BAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE;AAC1D,QAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,QAAI,YAAY,GAAG,QAAQ,CAAC;AAC5B,QAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;AAC1E,QAAI,WAAW,GAAG,YAAY,CAAC;AAC/B,QAAI,SAAS,GAAG,UAAU,CAAC;AAC3B,QAAI,cAAc,GAAG,qBAAS,SAAS,CAAC,MAAM,CAAC,CAAC;;AAEhD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;AACvB,SAAI,qBAAS,eAAe,CAAC,cAAc,EAAE,SAAS,CAAC,EAAE;AACxD,UAAI,aAAa,GAAG,qBAAS,YAAY,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AACrE,UAAI,IAAI,GAAG,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC;AACtD,UAAI,IAAI,GAAG,QAAQ,EAAE;AACpB,eAAQ,GAAG,IAAI,CAAC;AAChB,iBAAU,GAAG,SAAS,CAAC;AACvB,mBAAY,GAAG,WAAW,CAAC;OAC3B;AACD,UAAI,qBAAS,cAAc,CAAC,SAAS,CAAC,EAAE;AACvC,aAAM;OACN;MACD;AACD,gBAAW,GAAG,CAAC,QAAQ,GAAI,EAAE,CAAC,CAAC,GAAI,CAAC,CAAC;AACrC,cAAS,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;KACpE;;AAED,WAAO,UAAU,CAAC;IAClB;;;;;;;;;;;;;;;UAaoB,wBAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE;AACtD,QAAI,EAAE,GAAG,qBAAS,SAAS,CAAC,YAAY,CAAC,CAAC;AAC1C,QAAI,EAAE,GAAG,qBAAS,SAAS,CAAC,OAAO,CAAC,CAAC;AACrC,QAAI,GAAG,GAAG,CAAC,CAAC;AACZ,QAAI,IAAI,GAAG,CAAC,CAAC;;AAEb,YAAQ,QAAQ;AACf,UAAK,KAAK,CAAC,GAAG;AACb,SAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;AACzB,UAAI,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC;AAC7C,YAAM;AAAA,AACP,UAAK,KAAK,CAAC,KAAK;AACf,SAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7C,UAAI,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC;AAC1B,YAAM;AAAA,AACP,UAAK,KAAK,CAAC,MAAM;AAChB,SAAG,GAAG,EAAE,CAAC,MAAM,CAAC;AAChB,UAAI,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC;AAC7C,YAAM;AAAA,AACP,UAAK,KAAK,CAAC,IAAI;AACd,SAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7C,UAAI,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC;AAC1B,YAAM;AAAA,KACP;;AAED,WAAO;AACN,WAAM,EAAE,GAAG,GAAG,EAAE,CAAC,MAAM;AACvB,WAAM,EAAE,EAAE,CAAC,MAAM;AACjB,SAAI,EAAE,IAAI;AACV,UAAK,EAAE,IAAI,GAAG,EAAE,CAAC,KAAK;AACtB,QAAG,EAAE,GAAG;AACR,UAAK,EAAE,EAAE,CAAC,KAAK;KACf,CAAC;IACF;;;;;;;;;;;UASqB,yBAAC,GAAG,EAAE;AAC3B,WAAO,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IAC5B;;;SAjII,KAAK;;;AA0IX,MAAK,CAAC,GAAG,GAAG,CAAC,CAAC;;;;;;;;AAQd,MAAK,CAAC,KAAK,GAAG,CAAC,CAAC;;;;;;;;AAQhB,MAAK,CAAC,MAAM,GAAG,CAAC,CAAC;;;;;;;;AAQjB,MAAK,CAAC,IAAI,GAAG,CAAC,CAAC;;kBAEA,KAAK","file":"bower_components/metal-position/src/Align.js","sourcesContent":["'use strict';\n\nimport Position from './Position';\n\n/**\n * Align utility. Computes region or best region to align an element with\n * another. Regions are relative to viewport, make sure to use element with\n * position fixed, or position absolute when the element first positioned\n * parent is the body element.\n */\nclass Align {\n\n\t/**\n\t * Aligns the element with the best region around alignElement. The best\n\t * region is defined by clockwise rotation starting from the specified\n\t * `position`. The element is always aligned in the middle of alignElement\n\t * axis.\n\t * @param {!Element} element Element to be aligned.\n\t * @param {!Element} alignElement Element to align with.\n\t * @param {Align.Top|Align.Right|Align.Bottom|Align.Left} pos\n\t *     The initial position to try. Options `Align.Top`, `Align.Right`,\n\t *     `Align.Bottom`, `Align.Left`.\n\t * @static\n\t */\n\tstatic align(element, alignElement, position) {\n\t\tvar bestRegion = this.getAlignBestRegion(element, alignElement, position);\n\n\t\tvar computedStyle = window.getComputedStyle(element, null);\n\t\tif (computedStyle.getPropertyValue('position') !== 'fixed') {\n\t\t\tbestRegion.top += window.pageYOffset;\n\t\t\tbestRegion.left += window.pageXOffset;\n\n\t\t\tvar offsetParent = element;\n\t\t\twhile ((offsetParent = offsetParent.offsetParent)) {\n\t\t\t\tbestRegion.top -= Position.getOffsetTop(offsetParent);\n\t\t\t\tbestRegion.left -= Position.getOffsetLeft(offsetParent);\n\t\t\t}\n\t\t}\n\n\t\telement.style.top = bestRegion.top + 'px';\n\t\telement.style.left = bestRegion.left + 'px';\n\t}\n\n\t/**\n\t * Returns the best region to align element with alignElement. The best\n\t * region is defined by clockwise rotation starting from the specified\n\t * `position`. The element is always aligned in the middle of alignElement\n\t * axis.\n\t * @param {!Element} element Element to be aligned.\n\t * @param {!Element} alignElement Element to align with.\n\t * @param {Align.Top|Align.Right|Align.Bottom|Align.Left} pos\n\t *     The initial position to try. Options `Align.Top`, `Align.Right`,\n\t *     `Align.Bottom`, `Align.Left`.\n\t * @return {DOMRect} Best region to align element.\n\t * @static\n\t */\n\tstatic getAlignBestRegion(element, alignElement, position) {\n\t\tvar bestArea = 0;\n\t\tvar bestPosition = position;\n\t\tvar bestRegion = this.getAlignRegion(element, alignElement, bestPosition);\n\t\tvar tryPosition = bestPosition;\n\t\tvar tryRegion = bestRegion;\n\t\tvar viewportRegion = Position.getRegion(window);\n\n\t\tfor (var i = 0; i < 4;) {\n\t\t\tif (Position.intersectRegion(viewportRegion, tryRegion)) {\n\t\t\t\tvar visibleRegion = Position.intersection(viewportRegion, tryRegion);\n\t\t\t\tvar area = visibleRegion.width * visibleRegion.height;\n\t\t\t\tif (area > bestArea) {\n\t\t\t\t\tbestArea = area;\n\t\t\t\t\tbestRegion = tryRegion;\n\t\t\t\t\tbestPosition = tryPosition;\n\t\t\t\t}\n\t\t\t\tif (Position.insideViewport(tryRegion)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttryPosition = (position + (++i)) % 4;\n\t\t\ttryRegion = this.getAlignRegion(element, alignElement, tryPosition);\n\t\t}\n\n\t\treturn bestRegion;\n\t}\n\n\t/**\n\t * Returns the region to align element with alignElement. The element is\n\t * always aligned in the middle of alignElement axis.\n\t * @param {!Element} element Element to be aligned.\n\t * @param {!Element} alignElement Element to align with.\n\t * @param {Align.Top|Align.Right|Align.Bottom|Align.Left} pos\n\t *     The position to align. Options `Align.Top`, `Align.Right`,\n\t *     `Align.Bottom`, `Align.Left`.\n\t * @return {DOMRect} Region to align element.\n\t * @static\n\t */\n\tstatic getAlignRegion(element, alignElement, position) {\n\t\tvar r1 = Position.getRegion(alignElement);\n\t\tvar r2 = Position.getRegion(element);\n\t\tvar top = 0;\n\t\tvar left = 0;\n\n\t\tswitch (position) {\n\t\t\tcase Align.Top:\n\t\t\t\ttop = r1.top - r2.height;\n\t\t\t\tleft = r1.left + r1.width / 2 - r2.width / 2;\n\t\t\t\tbreak;\n\t\t\tcase Align.Right:\n\t\t\t\ttop = r1.top + r1.height / 2 - r2.height / 2;\n\t\t\t\tleft = r1.left + r1.width;\n\t\t\t\tbreak;\n\t\t\tcase Align.Bottom:\n\t\t\t\ttop = r1.bottom;\n\t\t\t\tleft = r1.left + r1.width / 2 - r2.width / 2;\n\t\t\t\tbreak;\n\t\t\tcase Align.Left:\n\t\t\t\ttop = r1.top + r1.height / 2 - r2.height / 2;\n\t\t\t\tleft = r1.left - r2.width;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tbottom: top + r2.height,\n\t\t\theight: r2.height,\n\t\t\tleft: left,\n\t\t\tright: left + r2.width,\n\t\t\ttop: top,\n\t\t\twidth: r2.width\n\t\t};\n\t}\n\n\t/**\n\t * Checks if specified value is a valid position. Options `Align.Top`,\n\t *     `Align.Right`, `Align.Bottom`, `Align.Left`.\n\t * @param {Align.Top|Align.Right|Align.Bottom|Align.Left} val\n\t * @return {boolean} Returns true if value is a valid position.\n\t * @static\n\t */\n\tstatic isValidPosition(val) {\n\t\treturn 0 <= val && val <= 3;\n\t}\n}\n\n/**\n * Represents the `Align.Top` constant.\n * @type {number}\n * @default 0\n * @static\n */\nAlign.Top = 0;\n\n/**\n * Represents the `Align.Right` constant.\n * @type {number}\n * @default 1\n * @static\n */\nAlign.Right = 1;\n\n/**\n * Represents the `Align.Bottom` constant.\n * @type {number}\n * @default 2\n * @static\n */\nAlign.Bottom = 2;\n\n/**\n * Represents the `Align.Left` constant.\n * @type {number}\n * @default 3\n * @static\n */\nAlign.Left = 3;\n\nexport default Align;\n"],"sourceRoot":"/source/"}